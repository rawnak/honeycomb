/* ZCO - Cross-platform Application Framework
 * Copyright (C) 2014  Syeda Sultana
 *
 * z-vector.zco: vector class
 * This file is part of ZCO.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ZCO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZCO.  If not, see <http://www.gnu.org/licenses/>.
 */

%h{
#include <z-object.h>
#include <z-vector-iter.h>
#include <z-vector-segment.h>

typedef void(*ZVectorItemCallback)(void *item, void *userdata);
%}

%{
#include <string.h>
#include <stdio.h>
#include <errno.h>
#include <assert.h>
%}

class ZVector : ZObject
{
	private int item_size;
	private int count;
	private int storage_mode;
        private int is_insert_only_mode;
        private ZVectorSegment *head;
        private ZVectorSegment *tail;
	private void *userdata;
	private ZVectorItemCallback item_construct;
	private ZVectorItemCallback item_destruct;

	init(Self *self)
	{
                selfp->head = z_vector_segment_new(CTX);

                selfp->tail = selfp->head;
                z_object_ref(Z_OBJECT(selfp->tail));

		selfp->item_size = 0;
                selfp->storage_mode = 0;
                selfp->is_insert_only_mode = 0;
		selfp->count = 0;
		selfp->userdata = 0;
		selfp->item_construct = 0;
		selfp->item_destruct = 0;
	}

        override(ZObject) void reset(ZObject *object)
        {
		Self *self = (Self *) object;

		clear(self);

                if (selfp->head)
                        z_object_unref(Z_OBJECT(selfp->head));

                if (selfp->tail)
                        z_object_unref(Z_OBJECT(selfp->tail));

                selfp->head = z_vector_segment_new(CTX);

                selfp->tail = selfp->head;
                z_object_ref(Z_OBJECT(selfp->tail));

		selfp->item_size = 0;
                selfp->storage_mode = 0;
                selfp->is_insert_only_mode = 0;
		selfp->count = 0;
		selfp->userdata = 0;
		selfp->item_construct = 0;
		selfp->item_destruct = 0;

                PARENT_HANDLER(object);
        }

	override(ZObject) void dispose(ZObject *object)
	{
		Self *self = (Self *) object;

		clear(self);

                if (selfp->head)
                        z_object_unref(Z_OBJECT(selfp->head));

                if (selfp->tail)
                        z_object_unref(Z_OBJECT(selfp->tail));

		PARENT_HANDLER(object);
	}

	public Self *new(struct zco_context_t *ctx)
	{
		Self *self = GET_NEW(ctx);
		return self;
	}

        public int item_size
        {
                set
                {
                        if (value == 0) {
                                selfp->storage_mode = 1;
                                selfp->item_size = sizeof(void*);
                        } else {
                                selfp->storage_mode = 0;
                                selfp->item_size = value;
                        }
                }
        }

        public int is_insert_only_mode
        {
                set
                {
                        selfp->is_insert_only_mode = value;
                }
        }

	/* A callback function that will be used to construct each element
	   in the vector. By default, the value is NULL, indicating that
	   the value will not be initalized by any function */
	public ZVectorItemCallback item_construct
	{
		set
		{
			selfp->item_construct = value;
		}
	}

	/* A callback function that will be used to destruct each element
	   in the vector. By default, the value is NULL, indicating that
	   the value is assumed to be primitive and needn't be freed by
	   any function */
	public ZVectorItemCallback item_destruct
	{
		set
		{
			selfp->item_destruct = value;
		}
	}

	/* A userdata that is passed as the second argument to the item
	   constructor/destructor callbacks. Default value is NULL */
	public void * userdata
	{
		set
		{
			selfp->userdata = value;
		}
	}

	/* An iterator that points to the beginning of the vector */
	public ZVectorIter * begin
	{
		get
		{
			return z_vector_segment_get_begin(selfp->head);
		}
	}

	/* An iterator that points to the element one past the last
	   element of the vector */
	public ZVectorIter * end
	{
		get
		{
			return z_vector_segment_get_end(selfp->tail);
		}
	}

	/* The current count of the number of elements in the vector.
	   Decreasing the size of the vector does not free the unused memory.
	   To decrease the storage space of the vector, use the capacity
	   property */
	public int size
	{
		get
		{
                        return selfp->count;
		}
		set
		{
                        if (selfp->count < value) {
                                /* Grow vector */
                                int tail_size = 0;
                                
                                if (selfp->tail)
                                        tail_size = z_vector_segment_get_size(selfp->tail);

                                if (!selfp->tail || z_vector_segment_set_size(selfp->tail, tail_size + value - selfp->count,
                                                        selfp->item_size, selfp->storage_mode, selfp->userdata,
                                                        selfp->item_construct, selfp->item_destruct) != 0) {

                                        /* Failed to resize the tail. We need a new segment */
                                        ZVectorSegment *new_tail = z_vector_segment_new(CTX);
                                        z_vector_segment_set_size(new_tail, value - selfp->count,
                                                        selfp->item_size, selfp->storage_mode, selfp->userdata,
                                                        selfp->item_construct, selfp->item_destruct);

                                        if (selfp->tail)
                                                selfp->tail->next = new_tail;

                                        z_object_ref(Z_OBJECT(new_tail));

                                        /* No need to unref the old tail. We'll just assume that the reference
                                           is now owned by the new tail. */
                                        new_tail->prev = selfp->tail;
                                        new_tail->next = NULL;

                                        if (!selfp->tail)
                                                selfp->head = new_tail;

                                        selfp->tail = new_tail;
                                }

                                selfp->count = value;

                        } else if (selfp->count > value && !selfp->is_insert_only_mode) {
                                /* Shrink vector */
                                
                                int difference = selfp->count - value;

                                while (difference) {
                                        int tail_size = z_vector_segment_get_size(selfp->tail);
                                        if (tail_size <= difference) {
                                                /* The current tail has a reference from its previous node (+1)
                                                   and from the vector itself (+1) for a total ref-count of 2.

                                                   The new tail has a reference from its previous node (+1)
                                                   and from its next node (the current tail) (+1) for a total
                                                   ref-count of 2.

                                                   For the new tail, the ref-count remains unchanged so we needn't
                                                   call ref/unref on it. For the old tail, it loses a reference
                                                   from its previous node (-1) and from the vector itself (-1).
                                                 */

                                                ZVectorSegment *old_tail = selfp->tail;
                                                selfp->tail = old_tail->prev;
                                                old_tail->prev = NULL;

                                                if (selfp->tail) {
                                                        selfp->tail->next = NULL;
                                                        z_object_unref(Z_OBJECT(old_tail));
                                                } else {
                                                        selfp->head = NULL;
                                                }

                                                z_object_unref(Z_OBJECT(old_tail));

                                                difference -= tail_size;

                                        } else {
                                                z_vector_segment_set_size(selfp->tail, tail_size - difference,
                                                                selfp->item_size, selfp->storage_mode, selfp->userdata,
                                                                selfp->item_construct, selfp->item_destruct);

                                                difference = 0;
                                        }
                                }

                                selfp->count = value;
                        }
		}
	}

	/* Indicates whether the vector is empty */
	public int is_empty
	{
		get
		{
			return get_size(self) == 0;
		}
	}

	/* Indicates if the specified iterator is within the bounds
	   of the vector */
	public int is_in_bound(Self *self, ZVectorIter *iter)
	{
                ZVectorSegment *segment = z_vector_iter_get_segment(iter);
                return z_vector_segment_is_in_bound(segment, iter);
	}

	/* Get the element value at the specified position as indicated
	   by the iterator */
	public void * get_item(Self *self, ZVectorIter *iter)
	{
                ZVectorSegment *segment = z_vector_iter_get_segment(iter);
                return z_vector_segment_get_item(segment, iter, selfp->item_size, selfp->storage_mode);
	}

	/* Set the element value at the specified position as indicated
	   by the iterator */
	public int set_item(Self *self, ZVectorIter *iter, void *item)
	{
                ZVectorSegment *segment = z_vector_iter_get_segment(iter);
                return z_vector_segment_set_item(segment, iter, item, selfp->item_size, selfp->storage_mode);
	}

	/* The value of the first element in the vector */
	public void * front
	{
		get
		{
			ZVectorIter *iter = z_vector_iter_new(CTX);
                        z_vector_iter_set_segment(iter, selfp->head);
			void *item = get_item(self, iter);
			z_object_unref(Z_OBJECT(iter));
			return item;
		}
		set
		{
			ZVectorIter *iter = z_vector_iter_new(CTX);
                        z_vector_iter_set_segment(iter, selfp->head);
			set_item(self, iter, value);
			z_object_unref(Z_OBJECT(iter));
		}
	}

	/* The value fo the last element in the vector */
	public void * back
	{
		get
		{
			ZVectorIter *iter = get_end(self);
			z_vector_iter_decrement(iter);
			void *item = get_item(self, iter);
			z_object_unref(Z_OBJECT(iter));
			return item;

		}
		set 
		{
			ZVectorIter *iter = get_end(self);
			z_vector_iter_decrement(iter);
			set_item(self, iter, value);
			z_object_unref(Z_OBJECT(iter));
		}
	}

	/* Append a new element to the end of the vector, effectively
	   increasing the size of the vector by 1 */
	public void push_back(Self *self, void *item)
	{
		/*  increase the size of the vector by 1 */
		int size = get_size(self);
		set_size(self, size + 1);

		/* set the last item of the vector */
		set_back(self, item);
	}

	/* Pull out the last element of the vector and return it. This
	   effectively reduces the size of the vector by 1 if the vector
	   is not empty */
	public int pop_back(Self *self, void *item)
	{
                if (selfp->is_insert_only_mode)
                        return -1;

		if (item) {
			/* get the last item of the vector */
			void *d = get_back(self);
			memcpy(item, &d, selfp->item_size);
		}

		/* decrease the size of the vector by 1 */
		int size = get_size(self);
		set_size(self, size - 1);

                return 0;
	}

	/* Insert item before the element pointed to by the specified 
	   iterator. The 'n' parameter specifies how many times the item
	   should be inserted before the iterator */
	public int insert(Self *self, ZVectorIter *iter, int n, void *item)
	{
                /* We not be inserting the new elements at the back of the vector
                   so we also reject this operation in insert only mode */
                if (selfp->is_insert_only_mode)
                        return -1;

                ZVectorSegment *segment = z_vector_iter_get_segment(iter);
                z_vector_segment_insert(segment, iter, n, item, selfp->item_size, selfp->storage_mode,
                                selfp->userdata, selfp->item_construct, selfp->item_destruct);

                selfp->count += n;
	}

	/* Copy a range of elements from another vector. The items are inserted 
	   before the element pointed to by 'iter'. The range of elements that are
	   copied from the src vector is [src_iter_start,src_iter_end)
	 
	   If 'iter' is NULL, the new elements will be added to the end of the
	   target vector.
	 
	   If 'src_iter_start' is NULL, the assumed start iterator will be the
	   beginning of the source vector.

           If 'src_iter_end' is NULL, the assumed end iterator will be the end of
	   the source vector */
	public int insert_range(Self *self, ZVectorIter *iter, ZVector *src, ZVectorIter *src_iter_start, ZVectorIter *src_iter_end)
	{
                /* We not be inserting the new elements at the back of the vector
                   so we also reject this operation in insert only mode */
                if (selfp->is_insert_only_mode)
                        return -1;

                ZVectorSegment *target_segment = z_vector_iter_get_segment(iter);
                ZVectorSegment *source_start_segment = z_vector_iter_get_segment(src_iter_start);
                ZVectorSegment *source_end_segment = z_vector_iter_get_segment(src_iter_end);

                ZVectorSegment *source_segment = source_start_segment;
                int count = 0;

                while (1) {
                        if (source_segment == source_start_segment) {
                                if (source_segment == source_end_segment)
                                        count += z_vector_segment_insert_range(target_segment, iter, source_start_segment, src_iter_start,
                                                        src_iter_end, selfp->item_size, selfp->storage_mode, selfp->userdata,
                                                        selfp->item_construct, selfp->item_destruct);

                                else
                                        count += z_vector_segment_insert_range(target_segment, iter, source_start_segment, src_iter_start,
                                                        NULL, selfp->item_size, selfp->storage_mode, selfp->userdata,
                                                        selfp->item_construct, selfp->item_destruct);

                        } else if (source_segment == source_end_segment) {
                                count += z_vector_segment_insert_range(target_segment, iter, source_end_segment, NULL, src_iter_end,
                                                selfp->item_size, selfp->storage_mode, selfp->userdata,
                                                selfp->item_construct, selfp->item_destruct);

                        } else {
                                count += z_vector_segment_insert_segment(target_segment, source_segment, selfp->item_size);
                        }

                        if (source_segment == source_end_segment)
                                break;

                        source_segment = source_segment->next;
                }


                selfp->count += count;
	}

	/* Erase the items in the range [start,end) */
	public int erase(Self *self, ZVectorIter *start, ZVectorIter *end)
	{
                if (selfp->is_insert_only_mode)
                        return -1;

                ZVectorSegment *start_segment = z_vector_iter_get_segment(start);
                ZVectorSegment *end_segment = z_vector_iter_get_segment(end);
                ZVectorSegment *segment = start_segment;
                int count = 0;
                
                while (1) {
                        if (segment == start_segment) {
                                if (segment == end_segment)
                                        count += z_vector_segment_erase(start_segment, start, end, selfp->item_size, selfp->storage_mode,
                                                        selfp->userdata, selfp->item_destruct);

                                else
                                        count += z_vector_segment_erase(start_segment, start, NULL, selfp->item_size, selfp->storage_mode,
                                                        selfp->userdata, selfp->item_destruct);

                        } else if (segment == end_segment) {
                                count += z_vector_segment_erase(end_segment, NULL, end, selfp->item_size, selfp->storage_mode,
                                        selfp->userdata, selfp->item_destruct);

                        } else {
                                segment->prev->next = segment->next;
                                segment->next->prev = segment->prev;

                                /* 2 unrefs since it lost two references. one from the previous node
                                   and one from the next node */
                                z_object_unref(Z_OBJECT(segment));
                                z_object_unref(Z_OBJECT(segment));
                        }

                        if (segment == end_segment)
                                break;

                        segment = segment->next;
                }

                if (start_segment != end_segment) {
                        start_segment->next = end_segment;
                        end_segment->prev = start_segment;
                }

                selfp->count -= count;

                return 0;
	}

	/* Erase the item pointed to by the specified iterator */
	public int erase1(Self *self, ZVectorIter *iter)
	{
                int rc;
		ZVectorIter *next = z_vector_iter_dup(iter);

		z_vector_iter_increment(next);
		rc = erase(self, iter, next);

		z_object_unref(Z_OBJECT(next));

                return rc;
	}

	/* Erase the item pointed to by the specified iterator and also move the iterator
	   one step forward. This is useful for removing an item while iterating through
	   the vector in a loop */
	public int erase1_increment(Self *self, ZVectorIter *iter)
	{
                int rc;
                ZVectorIter *temp = get_begin(self);
                
		if (z_vector_iter_is_equal(iter, temp)) {
			/* iterator is pointing to the first element of the vector */
			rc = erase1(self, iter);

			z_object_unref(Z_OBJECT(temp));
			temp = get_begin(self);
			z_vector_iter_set_index(iter, z_vector_iter_get_index(temp));

		} else {
			z_vector_iter_set_index(temp, z_vector_iter_get_index(iter));
			z_vector_iter_decrement(iter);
			rc = erase1(self, temp);
			z_vector_iter_increment(iter);
		}

		z_object_unref(Z_OBJECT(temp));

                return rc;
	}

	/* Clear the vector */
	public int clear(Self *self)
	{
                if (selfp->count == 0)
                        return 0;

                if (selfp->is_insert_only_mode)
                        return -1;

		set_size(self, 0);

                return 0;
	}
}

