/* ZCO - Cross-platform Application Framework
 * Copyright (C) 2014  Rawnak Jahan Syeda
 *
 * z-event-loop.zco: Event loop interface
 * This file is part of ZCO.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ZCO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZCO.  If not, see <http://www.gnu.org/licenses/>.
 */

%h{
#include <z-vector.h>
#include <z-closure.h>
#include <z-bind.h>
#include <signal.h>

%}

%{
#include <z-value.h>
#include <stdint.h>
#include <assert.h>
#include <stdio.h>

/* In an application, the first thread (main thread) will create a zco context. Lets call this
   the main context. The main thread can then create one or several zco contexts, each with an
   instance of ZEventLoop. Lets call these contexts the worker contexts. The ZEventLoop object
   will be under the worker context but, unlike other ZObject derived classes, some of its methods
   will be thread-safe.

   get_is_current() will return TRUE if the event loop is operating under the calling thread.

   run() will start the event loop in a new thread. This is not a blocking call since the loop
   will run on a new thread.

   post_task() will push a task described by a Bind object onto the context. The task will be
   scheduled to run after the specified timeout period. If a timeout of 0 is specified, it will
   run as soon as possible.

   quit() will push a QUIT task to the event loop. This task will set a flag so the event loop
   no longer waits for a new task. The event loop will still process any remaining tasks that
   are in the queue but it will not accept new tasks.

 */
%}

class ZEventLoop : ZObject
{
        private ZBind *quit_task;
        private pthread_t thread;

        private ZBindData *read_queue;
        private ZBindData *write_queue;

        private pthread_cond_t  schedule_cond;

        private pthread_mutex_t read_queue_lock;
        private pthread_mutex_t write_queue_lock;

        /* This flag is written by do_quit(), and it's read by thread_main(),
           post_task(), and quit().

           The do_quit() function is a callback that is called from within thread_main().
           Since both functions operate on the same thread, there shouldn't be any
           race condition between them.

           The post_task(), and quit() function checks the is_done flag to determine
           if it should add more tasks into the queue. It's possible to have a race
           condition such that when it checks the value of the flag, it is clear but
           when it actually adds a task into the queue, the value is set. This is an
           acceptable race condition and it's ok for thread_main() to process tasks
           that have been scheduled after the 'quit' task is scheduled. Eventually the
           is_done flag will be recognized as set (if a termination is scheduled) and
           no more tasks will be added to the queue - which will allow thread_main()
           to exit gracefully. */
        private volatile sig_atomic_t is_done;

        /* This flag is written by two function thread_main(), run() and it's read by
           three functions run(), post_task(), quit(). 

           The thread_main() function can only run after the run() function is called
           so there should not be a race condition to write on the flag by these two
           functions.

           The thread_main() function will not modify the flag unless the event loop
           is scheduled to be terminated. If the application already called quit() to
           schedule the termination, subsequent calls to post_task() and quit() will be
           a no-op since the is_done flag is set. This will prevent post_task() and quit()
           from reading the is_running flag since thread_main() can clear the flag any
           moment.  */
        private volatile sig_atomic_t is_running;

        init(Self *self)
        {
                selfp->is_done = 0;
                selfp->is_running = 0;

                struct zco_context_t *ctx = CTX_FROM_OBJECT(self);
                ZMemoryAllocator *allocator = ALLOCATOR_FROM_OBJECT(self);

                /* Create a bind closure for the quit task */
                selfp->quit_task = z_bind_new(ctx, allocator);
                z_bind_set_handler(selfp->quit_task, (ZBindHandler) zco_context_do_quit);
                z_bind_append_ptr(selfp->quit_task, self);

                /* Initialize task queues */
                selfp->read_queue = NULL;
                selfp->write_queue = NULL;

                /* Initialize locks */
                pthread_mutex_init(&selfp->read_queue_lock, NULL);
                pthread_mutex_init(&selfp->write_queue_lock, NULL);

                /* Initialize condition variables */
                pthread_cond_init(&selfp->schedule_cond, NULL);
        }

        private void delete_queue(Self *self, ZBindData *queue)
        {
                ZMemoryAllocator *allocator = CTX_FROM_OBJECT(self)->ts_fixed_allocator;

                while (queue) {
                        ZBindData *next = queue->next;
                        z_memory_allocator_deallocate_by_size(allocator, queue, sizeof(ZBindData));
                        queue = next;
                }
        }

        override(ZObject) void reset(ZObject *object)
        {
                Self *self = (Self *) object;
                quit(self);

                /* Wait for thread to complete */
                pthread_join(selfp->thread, NULL);
                selfp->is_done = 0;

                delete_queue(self, selfp->write_queue);
                delete_queue(self, selfp->read_queue);

                selfp->write_queue = NULL;
                selfp->read_queue = NULL;

                PARENT_HANDLER(object);
        }

	override(ZObject) void dispose(ZObject *object)
	{
		Self *self = (Self *) object;

                quit(self);
                z_object_unref(Z_OBJECT(selfp->quit_task));

                /* Wait for thread to complete */
                pthread_join(selfp->thread, NULL);
                selfp->is_done = 0;

                delete_queue(self, selfp->write_queue);
                delete_queue(self, selfp->read_queue);

                selfp->write_queue = NULL;
                selfp->read_queue = NULL;

                pthread_mutex_destroy(&selfp->write_queue_lock);
                pthread_mutex_destroy(&selfp->read_queue_lock);

		PARENT_HANDLER(object);
	}

	public Self *new(struct zco_context_t *ctx, ZMemoryAllocator *allocator)
	{
		Self *self = GET_NEW(ctx, allocator);
		return self;
	}

        public int is_current
        {
                get
                {
                        return pthread_equal(pthread_self(), selfp->thread);
                }
        }

        private void swap_queues(Self *self)
        {
                /* Swap the read_queue and write_queue */
                pthread_mutex_lock(&selfp->read_queue_lock);
                pthread_mutex_lock(&selfp->write_queue_lock);

                ZBindData *temp = selfp->read_queue;
                selfp->read_queue = selfp->write_queue;
                selfp->write_queue = temp;

                pthread_mutex_unlock(&selfp->write_queue_lock);
                pthread_mutex_unlock(&selfp->read_queue_lock);
        }

        private void thread_main(Self *self)
        {
                struct zco_context_t *ctx = CTX_FROM_OBJECT(self);
                ZMemoryAllocator *allocator = ALLOCATOR_FROM_OBJECT(self);
                ZMemoryAllocator *data_allocator = ctx->ts_fixed_allocator;

                while (1) {
                        /* Execute all tasks in the read_queue. The read_queue is not touched
                           by the post_task operation so we needn't hold onto a lock to access it */
                        ZBindData *queue = selfp->read_queue;
                        selfp->read_queue = NULL;

                        while (queue) {
                                ZBindData *next = queue->next;

                                /* Create a new bind object under the worker context and set it to point
                                   to the data that was copied in post_task(). */
                                ZBind *task = z_bind_new(ctx, allocator);
                                z_bind_set_data_ptr(task, queue);

                                /* Execute the task */
                                z_bind_invoke(task);

                                /* Release the closure data and the task object */
                                z_memory_allocator_deallocate_by_size(data_allocator, queue, sizeof(ZBindData));
                                z_object_unref(Z_OBJECT(task));

                                queue = next;
                        }

                        /* All tasks in the read_queue has been executed. Lets swap the read_queue
                           and write_queue so we can execute newly added tasks that exists in the
                           write_queue. */
                        swap_queues(self);

                        /* If the new read_queue is not empty, repeat the loop and run all tasks
                           in the queue */
                        if (selfp->read_queue)
                                continue;

                        /* If the new read_queue is empty and the is_done flag is set, we exit
                           the loop */
                        if (selfp->is_done)
                                break;

                        /* Wait for a schedule work signal */
                        pthread_mutex_lock(&selfp->write_queue_lock);

                        if (!selfp->write_queue)
                                pthread_cond_wait(&selfp->schedule_cond, &selfp->write_queue_lock);

                        pthread_mutex_unlock(&selfp->write_queue_lock);

                        /* New tasks have been added to the write_queue. Lets swap the read_queue
                           and write_queue so we can execute the tasks in the read_queue */
                        swap_queues(self);
                }

                selfp->is_running = 0;
                pthread_exit(0);
        }

        public void run(Self *self)
        {
                if (selfp->is_running)
                        return;

                selfp->is_running = 1;
                memset(&selfp->thread, 0, sizeof(pthread_t));
                pthread_create(&selfp->thread, NULL, (void * (*)(void*)) &thread_main, self);
        }

        private int is_active(Self *self)
        {
                /* It's optimal to check the is_done flag over is_running. The is_running flag
                   can be modified by the thread_main() function so there is a greater chance
                   of a cache miss if we read from it */
                if (selfp->is_done || !selfp->is_running)
                        return 0;

                return 1;
        }

        /* This method must be thread safe */
        public void post_task(Self *self, ZBind *bind, uint64_t ns)
        {
                if (!is_active(self))
                        return;

                /* Use the thread-safe allocator to allocate memory for the raw closure */
                ZMemoryAllocator *allocator = CTX_FROM_OBJECT(self)->ts_fixed_allocator;
                ZBindData *data = z_memory_allocator_allocate(allocator, sizeof(ZBindData));

                /* Hold the write_queue lock */
                pthread_mutex_lock(&selfp->write_queue_lock);

                /* Get the closure data and insert it into the write queue */
                z_bind_get_data(bind, data);
                data->next = selfp->write_queue;
                selfp->write_queue = data;

                /* Send a signal that new work has been scheduled */
                pthread_cond_signal(&selfp->schedule_cond);

                /* Release the write_queue lock */
                pthread_mutex_unlock(&selfp->write_queue_lock);
        }

        private void zco_context_do_quit(ZBind *bind, Self *self)
        {
                selfp->is_done = 1;
        }

        /* This method must be thread safe */
        public void quit(Self *self)
        {
                if (!is_active(self))
                        return;

                /* Send a QUIT signal to the thread */
                post_task(self, selfp->quit_task, 0);
        }

}

