/* ZCO - Cross-platform Application Framework
 * Copyright (C) 2014  Syeda Sultana
 *
 * z-vector-segment.zco: Vector segment class
 * This file is part of ZCO.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ZCO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZCO.  If not, see <http://www.gnu.org/licenses/>.
 */

%h{
#include <z-object.h>
#include <z-vector-iter.h>

struct ZVector;
typedef struct ZVector ZVector;
typedef void(*ZVectorItemCallback)(void *item, void *userdata);
%}

%{
#include <string.h>
#include <stdio.h>
#include <errno.h>
#include <assert.h>
%}

class ZVectorSegment : ZObject
{
	private int count;
	private int capacity;
	private void *data;
        public Self *prev;
        public Self *next;

	init(Self *self)
	{
		selfp->count = 0;
		selfp->capacity = 0;
		selfp->data = 0;
                self->prev = NULL;
                self->next = NULL;
	}

        override(ZObject) void reset(ZObject *object)
        {
		Self *self = (Self *) object;

                if (self->prev)
                        z_object_unref(Z_OBJECT(self->prev));

                if (self->next)
                        z_object_unref(Z_OBJECT(self->next));


		selfp->count = 0;
		selfp->capacity = 0;
		selfp->data = 0;

                self->prev = NULL;
                self->next = NULL;

                PARENT_HANDLER(object);
        }

	override(ZObject) void dispose(ZObject *object)
	{
		Self *self = (Self *) object;

                if (self->prev)
                        z_object_unref(Z_OBJECT(self->prev));

                if (self->next)
                        z_object_unref(Z_OBJECT(self->next));

                self->prev = NULL;
                self->next = NULL;

		PARENT_HANDLER(object);
	}

	public Self *new(struct zco_context_t *ctx)
	{
		Self *self = GET_NEW(ctx);
		return self;
	}

	/* The current count of the number of elements in the vector.
	   Decreasing the size of the vector does not free the unused memory.
	   To decrease the storage space of the vector, use the capacity
	   property */

        public int get_size(Self *self)
        {
                return selfp->count;
        }

        public int set_size(Self *self, int value, int item_size, int storage_mode, void *userdata,
                        ZVectorItemCallback item_construct, ZVectorItemCallback item_destruct)
        {
                if (selfp->count < value) {
                        /* grow the vector */
                        if (selfp->capacity < value) {
                                set_capacity(self, value * 2, item_size, storage_mode, userdata,
                                                item_construct, item_destruct);
                        }

                        if (item_construct) {
                                int i;

                                if (storage_mode == 0) {
                                        for (i = selfp->count; i < value; ++i) {
                                                int offset = i * item_size;
                                                item_construct(selfp->data + offset, userdata);
                                        }
                                } else {
                                        for (i = selfp->count; i < value; ++i) {
                                                int offset = i * item_size;
                                                item_construct(*((void **)(selfp->data + offset)), userdata);
                                        }
                                }
                        }

                } else if (selfp->count > value) {
                        /* shrink the vector */
                        if (item_destruct) {
                                int i;

                                if (storage_mode == 0) {
                                        for (i = value; i < selfp->count; ++i) {
                                                int offset = i * item_size;
                                                item_destruct(selfp->data + offset, userdata);
                                        }
                                } else {
                                        for (i = value; i < selfp->count; ++i) {
                                                int offset = i * item_size;
                                                item_destruct(*((void **)(selfp->data + offset)), userdata);
                                        }
                                }
                        }
                }

                selfp->count = value;

                /* FIXME: Always realloc the buffer for now. Once we have an allocator that is able to resize
                   a buffer and fail if it's not possible, we can return a different return code here to notify
                   the caller that the set_size operation wasn't successful */
                return 0;
        }

	/* The current storage capacity of the vector. This value must be
	   greater than or equal to the size of the vector. */
        public int get_capacity(Self *self)
        {
                return selfp->capacity;
        }

        public void set_capacity(Self *self, int value, int item_size, int storage_mode, void *userdata,
                        ZVectorItemCallback item_construct, ZVectorItemCallback item_destruct)
        {
                if (value < selfp->count) {
                        set_size(self, value, item_size, storage_mode, userdata, item_construct, item_destruct);
                        selfp->count = value;
                }

                selfp->capacity = value;

                if (value) {
                        if (selfp->data) {
                                int copy_size = selfp->count * item_size;
                                void *b = malloc(value * item_size);
                                memcpy(b, selfp->data, copy_size);
                                free(selfp->data);
                                selfp->data = b;
                        } else {
                                selfp->data = malloc(value * item_size);
                        }

                } else if (selfp->data) {
                        free(selfp->data);
                        selfp->data = NULL;
                }
        }

	/* Indicates if the specified iterator is within the bounds
	   of the vector */
	public int is_in_bound(Self *self, ZVectorIter *iter)
	{
		int index = z_vector_iter_get_index(iter);

		if (index >= 0 && index < selfp->count)
			return 1;

		else
			return 0;
	}

	/* Get the element value at the specified position as indicated
	   by the iterator */
	public void * get_item(Self *self, ZVectorIter *iter, int item_size, int storage_mode)
	{
		int index = z_vector_iter_get_index(iter);
		int offset = index * item_size;

		if (is_in_bound(self, iter)) {
			if (storage_mode == 0)
				return selfp->data + offset;
			else
				return *((void **)(selfp->data + offset));

		} else {
			fprintf(stderr, "Index out of bound. max=%d, index=%d\n", selfp->count-1, index);
		}

		return NULL;
	}

	/* Set the element value at the specified position as indicated
	   by the iterator */
	public int set_item(Self *self, ZVectorIter *iter, void *item, int item_size, int storage_mode)
	{
		int index = z_vector_iter_get_index(iter);
		int offset = index * item_size;

		if (index >= 0 && index < selfp->count) {
			if (storage_mode == 0)
				memcpy(selfp->data + offset, item, item_size);
			else
				memcpy(selfp->data + offset, &item, item_size);

			return 0;
		}

		return ERANGE;
	}

        public int insert_segment(Self *self, ZVectorSegment *src, int item_size)
        {
                ZVectorSegment *obj;

                obj = z_vector_segment_new(CTX);
                obj->_priv.count = src->_priv.count;
                obj->_priv.capacity = src->_priv.count;
                obj->next = self;
                obj->prev = self->prev;
                self->prev->next = obj;
                self->prev = obj;

                obj->_priv.data = malloc(src->_priv.capacity * item_size);
                memcpy(obj->_priv.data, src->_priv.data, src->_priv.count * item_size);

                return obj->_priv.count;
        }

	/* Insert item before the element pointed to by the specified 
	   iterator. The 'n' parameter specifies how many times the item
	   should be inserted before the iterator */
	public void insert(Self *self, ZVectorIter *iter, int n, void *item, int item_size, int storage_mode,
                        void *userdata, ZVectorItemCallback item_construct, ZVectorItemCallback item_destruct)
	{
		/* make a copy of the iterator */
		ZVectorIter *it = z_vector_iter_dup(iter);

		/* increase the size of the vector */
		int size = get_size(self);
                set_size(self, size + n, item_size, storage_mode, userdata, item_construct, item_destruct);

		/* shift all elements in [it,inf) forward */
		memmove(selfp->data + (z_vector_iter_get_index(it) + n) * item_size,
			selfp->data + z_vector_iter_get_index(it) * item_size,
			(size - z_vector_iter_get_index(it)) * item_size);

		int i;
		for (i=0; i<n; ++i) {
			set_item(self, it, item, item_size, storage_mode);
			z_vector_iter_increment(it);
		}

		z_object_unref(Z_OBJECT(it));
	}

	/* An iterator that points to the beginning of the vector */
	public ZVectorIter * begin
	{
		get
		{
			ZVectorIter *iter = z_vector_iter_new(CTX);
                        z_vector_iter_set_segment(iter, self);
			return iter;
		}
	}

	/* An iterator that points to the element one past the last
	   element of the vector */
	public ZVectorIter * end
	{
		get
		{
			ZVectorIter *iter = z_vector_iter_new(CTX);
                        z_vector_iter_set_segment(iter, self);
			z_vector_iter_set_index(iter, get_size(self));
			return iter;
		}
	}

	/* Copy a range of elements from another vector. The items are inserted 
	   before the element pointed to by 'iter'. The range of elements that are
	   copied from the src vector is [src_iter_start,src_iter_end)
	 
	   If 'iter' is NULL, the new elements will be added to the end of the
	   target vector.
	 
	   If 'src_iter_start' is NULL, the assumed start iterator will be the
	   beginning of the source vector.

           If 'src_iter_end' is NULL, the assumed end iterator will be the end of
	   the source vector */
	public int insert_range(Self *self, ZVectorIter *iter, ZVectorSegment *src, ZVectorIter *src_iter_start, ZVectorIter *src_iter_end,
                        int item_size, int storage_mode, void *userdata, ZVectorItemCallback item_construct,
                        ZVectorItemCallback item_destruct)
	{
		ZVectorIter *it1, *it2;
		ZVectorIter *dest_it;

		/* make a copy of the iterators */
		if (iter == NULL)
			dest_it = get_end(self);
		else
			dest_it = z_vector_iter_dup(iter);

		if (src_iter_start == NULL)
			it1 = get_begin(src);
		else
			it1 = z_vector_iter_dup(src_iter_start);

		if (src_iter_end == NULL)
			it2 = get_end(src);
		else
			it2 = z_vector_iter_dup(src_iter_end);
		
		/* compute the item count */
		int n = z_vector_iter_get_index(it2) - z_vector_iter_get_index(it1);

		assert(n >= 0);

		/* increase the size of the vector */
		int size = get_size(self);
                set_size(self, size + n, item_size, storage_mode, userdata, item_construct, item_destruct);

		/* shift all elements in [dest_it,inf) forward */
		memmove(selfp->data +
				(z_vector_iter_get_index(dest_it) + n) * item_size,
				selfp->data + z_vector_iter_get_index(dest_it) * item_size,
				(size - z_vector_iter_get_index(dest_it)) * item_size);

		/* insert the new item(s) */
		int i;
		for (i=0; i<n; ++i) {
			void *data = get_item(src, it1, item_size, storage_mode);
			set_item(self, dest_it, data, item_size, storage_mode);

			z_vector_iter_increment(dest_it);
			z_vector_iter_increment(it1);
		}

		z_object_unref(Z_OBJECT(it1));
		z_object_unref(Z_OBJECT(it2));
		z_object_unref(Z_OBJECT(dest_it));

                return n;
	}

	/* Erase the items in the range [start,end) */
	public int erase(Self *self, ZVectorIter *start, ZVectorIter *end, int item_size, int storage_mode,
                        void *userdata, ZVectorItemCallback item_destruct)
	{
		ZVectorIter *it1;
		ZVectorIter *it2;

		if (start == NULL)
			start = get_begin(self);
                else
                        z_object_ref(Z_OBJECT(start));

		if (end == NULL)
			end = get_end(self);
                else
                        z_object_ref(Z_OBJECT(end));
		
		/* compute the item count */
		int n = z_vector_iter_get_index(end) - z_vector_iter_get_index(start);

		if (n >= 0) {
			it1 = z_vector_iter_dup(start);
			it2 = z_vector_iter_dup(end);
		} else {
			it1 = z_vector_iter_dup(end);
			it2 = z_vector_iter_dup(start);
			n = -n;
		}

		/* call the item destructor on the items that is being removed */
		if (item_destruct) {
			ZVectorIter *temp = z_vector_iter_dup(it1);

			for (; !z_vector_iter_is_equal(temp, it2); z_vector_iter_increment(temp)) {
                                void *item = get_item(self, temp, item_size, storage_mode);
				item_destruct(item, userdata);
			}

			z_object_unref(Z_OBJECT(temp));
		}

		/* shift all elements in [it1,inf) backward */
		int size = get_size(self);

		memmove(selfp->data + (z_vector_iter_get_index(it1)) * item_size,
			selfp->data + (z_vector_iter_get_index(it1) + n) * item_size,
			(size - z_vector_iter_get_index(it2)) * item_size);

		/* decrease the size of the vector */
		selfp->count = size - n;

		z_object_unref(Z_OBJECT(it2));
		z_object_unref(Z_OBJECT(it1));

                return n;
	}
}

