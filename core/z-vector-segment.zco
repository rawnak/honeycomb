/* ZCO - Cross-platform Application Framework
 * Copyright (C) 2014  Syeda Sultana
 *
 * z-vector-segment.zco: Vector segment class
 * This file is part of ZCO.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ZCO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZCO.  If not, see <http://www.gnu.org/licenses/>.
 */

%h{
#include <z-object.h>
#include <z-vector-iter.h>

struct ZVector;
typedef struct ZVector ZVector;
typedef void(*ZVectorItemCallback)(void *item, void *userdata);
%}

%{
#include <string.h>
#include <stdio.h>
#include <errno.h>
#include <assert.h>
%}

class ZVectorSegment : ZObject
{
        private int start;
	private int count;
	private int capacity;
	private void *data;
        private Self *prev;
        private Self *next;

	init(Self *self)
	{
                selfp->start = 0;
		selfp->count = 0;
		selfp->capacity = 0;
		selfp->data = 0;
                selfp->prev = NULL;
                selfp->next = NULL;
	}

        override(ZObject) void reset(ZObject *object)
        {
		Self *self = (Self *) object;

                set_prev(self, NULL);
                set_next(self, NULL);

                if (selfp->data)
                        free(selfp->data);
                
                selfp->data = 0;
                selfp->start = 0;
		selfp->count = 0;
		selfp->capacity = 0;

                PARENT_HANDLER(object);
        }

	override(ZObject) void dispose(ZObject *object)
	{
		Self *self = (Self *) object;

                set_prev(self, NULL);
                set_next(self, NULL);

                if (selfp->data)
                        free(selfp->data);
                
                selfp->data = 0;

		PARENT_HANDLER(object);
	}

	public Self *new(struct zco_context_t *ctx)
	{
		Self *self = GET_NEW(ctx);
		return self;
	}

        public Self *prev
        {
                get
                {
                        if (selfp->prev)
                                z_object_ref(Z_OBJECT(selfp->prev));

                        return selfp->prev;
                }
                set
                {
                        if (selfp->prev)
                                z_object_unref(Z_OBJECT(selfp->prev));

                        selfp->prev = value;

                        if (value)
                                z_object_ref(Z_OBJECT(value));
                }
        }

        public Self *next
        {
                get
                {
                        if (selfp->next)
                                z_object_ref(Z_OBJECT(selfp->next));

                        return selfp->next;
                }
                set
                {
                        if (selfp->next)
                                z_object_unref(Z_OBJECT(selfp->next));

                        selfp->next = value;

                        if (value)
                                z_object_ref(Z_OBJECT(value));
                }
        }

	/* The current count of the number of elements in the vector.
	   Decreasing the size of the vector does not free the unused memory.
	   To decrease the storage space of the vector, use the capacity
	   property */

        public int get_size(Self *self)
        {
                return selfp->count;
        }

        public int set_size(Self *self, int value, int item_size, int storage_mode, void *userdata,
                        ZVectorItemCallback item_construct, ZVectorItemCallback item_destruct)
        {
                int rc = 0;

                if (selfp->count < value) {
                        /* grow the vector */
                        if (selfp->capacity < value) {
                                rc = set_capacity(self, value * 2, item_size, storage_mode, userdata,
                                                item_construct, item_destruct);
                                
                                if (rc)
                                        goto done;
                        }

                        if (item_construct) {
                                int i;

                                if (storage_mode == 0) {
                                        for (i = selfp->count; i < value; ++i) {
                                                int offset = i * item_size;
                                                item_construct(selfp->data + selfp->start + offset, userdata);
                                        }
                                } else {
                                        for (i = selfp->count; i < value; ++i) {
                                                int offset = i * item_size;
                                                item_construct(*((void **)(selfp->data + selfp->start + offset)), userdata);
                                        }
                                }
                        }

                } else if (selfp->count > value) {
                        /* shrink the vector */
                        if (item_destruct) {
                                int i;

                                if (storage_mode == 0) {
                                        for (i = value; i < selfp->count; ++i) {
                                                int offset = i * item_size;
                                                item_destruct(selfp->data + selfp->start + offset, userdata);
                                        }
                                } else {
                                        for (i = value; i < selfp->count; ++i) {
                                                int offset = i * item_size;
                                                item_destruct(*((void **)(selfp->data + selfp->start + offset)), userdata);
                                        }
                                }
                        } 
                }

                selfp->count = value;

done:
                return rc;
        }

	/* The current storage capacity of the vector. This value must be
	   greater than or equal to the size of the vector. */
        public int get_capacity(Self *self)
        {
                return selfp->capacity;
        }

        private int set_capacity(Self *self, int value, int item_size, int storage_mode, void *userdata,
                        ZVectorItemCallback item_construct, ZVectorItemCallback item_destruct)
        {
                if (value < selfp->count) {
                        set_size(self, value, item_size, storage_mode, userdata, item_construct, item_destruct);
                        selfp->count = value;
                }

                if (value) {
                        int min_segment_capacity_by_size = zco_context_get_min_segment_capacity_by_size(CTX_FROM_OBJECT(self));
                        int min_segment_capacity_by_count = zco_context_get_min_segment_capacity_by_count(CTX_FROM_OBJECT(self));

                        /* restrict minimum segment size by count */
                        if (value < min_segment_capacity_by_count)
                                value = min_segment_capacity_by_count;

                        /* restrict minimum segment size by size in bytes */
                        if (value * item_size < min_segment_capacity_by_size)
                                value = (min_segment_capacity_by_size + item_size - 1) / item_size;

                        if (selfp->data) {
                                /* FIXME: We cannot resize the buffer until we have an allocator to do so */
                                return -1;
                        } else {
                                selfp->capacity = value;
                                selfp->data = malloc(value * item_size);
                        }

                } else if (selfp->data) {
                        selfp->capacity = 0;

                        free(selfp->data);
                        selfp->data = NULL;
                }

                return 0;
        }

	/* Indicates if the specified iterator is within the bounds
	   of the vector */
	public int is_in_bound(Self *self, ZVectorIter *iter)
	{
		int index = z_vector_iter_get_index(iter);

		if (index >= 0 && index < selfp->count)
			return 1;

		else
			return 0;
	}

	/* Get the element value at the specified position as indicated
	   by the iterator */
	public void * get_item(Self *self, ZVectorIter *iter, int item_size, int storage_mode)
	{
		int index = z_vector_iter_get_index(iter);
		int offset = index * item_size;

		if (is_in_bound(self, iter)) {
			if (storage_mode == 0)
				return selfp->data + selfp->start + offset;
			else
				return *((void **)(selfp->data + selfp->start + offset));

		} else {
			fprintf(stderr, "Index out of bound. max=%d, index=%d\n", selfp->count-1, index);
		}

		return NULL;
	}

	/* Set the element value at the specified position as indicated
	   by the iterator */
	public int set_item(Self *self, ZVectorIter *iter, void *item, int item_size, int storage_mode)
	{
		int index = z_vector_iter_get_index(iter);
		int offset = index * item_size;

		if (index >= 0 && index < selfp->count) {
			if (storage_mode == 0)
				memcpy(selfp->data + selfp->start + offset, item, item_size);
			else
				memcpy(selfp->data + selfp->start + offset, &item, item_size);

			return 0;
		}

		return ERANGE;
	}

	/* Insert item before the element pointed to by the specified 
	   iterator. The 'n' parameter specifies how many times the item
	   should be inserted before the iterator.
         
           Note: the items that are moved will not be destructed and will not be re-constructed
                 in their new location. For that reason, the items should not assume anything about their
                 allocated space. This should be fine for storage_mode=1, where each item is a pointer
                 to an externally allocated object and the address of the pointer is not very important.
                 The newly inserted items are initialized using the copy constructor, if the callback is specified.
         */
	public int insert(Self *self, ZVectorIter *iter, int n, void *item, int item_size, int storage_mode,
                        void *userdata, ZVectorItemCallback item_copy_construct)
	{
		/* increase the size of the vector */

		int size = get_size(self);
                int rc = set_size(self, size + n, item_size, storage_mode, NULL, NULL, NULL);

                if (rc)
                        return rc;

                assert(size + n == get_size(self));
                //assert(self == z_vector_iter_get_segment(iter));

		/* make a copy of the iterator */
		ZVectorIter *it = z_vector_iter_dup(iter);

		/* shift all elements in [it,inf) forward */
                int index = z_vector_iter_get_index(it);
                assert(size >= index);

                if (size > index) {
                        void *base = selfp->data + selfp->start;
                        memmove(base + (index + n) * item_size,
                                base + index * item_size,
                                (size - index) * item_size);
                }

		int i;

                if (item_copy_construct) {
                        int i;

                        if (storage_mode == 0) {
                                for (i=0; i<n; ++i) {
                                        set_item(self, it, item, item_size, storage_mode);
                                        z_vector_iter_increment(it);

                                        int offset = (index + i) * item_size;
                                        item_copy_construct(selfp->data + selfp->start + offset, userdata);
                                }

                        } else {
                                for (i=0; i<n; ++i) {
                                        set_item(self, it, item, item_size, storage_mode);
                                        z_vector_iter_increment(it);

                                        int offset = (index + i) * item_size;
                                        item_copy_construct(*((void **)(selfp->data + selfp->start + offset)), userdata);
                                }
                        }
                } else {
                        for (i=0; i<n; ++i) {
                                set_item(self, it, item, item_size, storage_mode);
                                z_vector_iter_increment(it);
                        }
                }


		z_object_unref(Z_OBJECT(it));

		return 0;
	}

	/* An iterator that points to the beginning of the vector */
	public ZVectorIter * begin
	{
		get
		{
			ZVectorIter *iter = z_vector_iter_new(CTX_FROM_OBJECT(self));
                        z_vector_iter_set_segment(iter, self);
			return iter;
		}
	}

	/* An iterator that points to the element one past the last
	   element of the vector */
	public ZVectorIter * end
	{
		get
		{
			ZVectorIter *iter = z_vector_iter_new(CTX_FROM_OBJECT(self));
                        z_vector_iter_set_segment(iter, self);
			z_vector_iter_set_index(iter, get_size(self)-1);
                        z_vector_iter_increment(iter);
			return iter;
		}
	}

	/* Copy a range of elements from another vector. The items are inserted 
	   before the element pointed to by 'iter'. The range of elements that are
	   copied from the src vector is [src_iter_start,src_iter_end)
	 
	   If 'iter' is NULL, the new elements will be added to the end of the
	   target vector.
	 
	   If 'src_iter_start' is NULL, the assumed start iterator will be the
	   beginning of the source vector.

           If 'src_iter_end' is NULL, the assumed end iterator will be the end of
	   the source vector.
         
           Note: the items that are moved will not be destructed and will not be re-constructed
                 in their new location. For that reason, the items should not assume anything about their
                 allocated space. This should be fine for storage_mode=1, where each item is a pointer
                 to an externally allocated object and the address of the pointer is not very important.
                 The newly inserted items are initialized using the copy constructor, if the callback is specified.
         */
	public int insert_range(Self *self, ZVectorIter *iter, ZVectorSegment *src, ZVectorIter *src_iter_start, ZVectorIter *src_iter_end,
                        int item_size, int storage_mode, void *userdata, ZVectorItemCallback item_copy_construct)
	{
		ZVectorIter *it1, *it2;
		ZVectorIter *dest_it;

		/* make a copy of the iterators */
		if (iter == NULL)
			dest_it = get_end(self);
		else
			dest_it = z_vector_iter_dup(iter);

		if (src_iter_start == NULL)
			it1 = get_begin(src);
		else
			it1 = z_vector_iter_dup(src_iter_start);

		if (src_iter_end == NULL)
			it2 = get_end(src);
		else
			it2 = z_vector_iter_dup(src_iter_end);

		/* compute the item count */
                ZVectorSegment *it2_segment = z_vector_iter_get_segment(it2);

		int n;
                if (src == it2_segment) {
                        n = z_vector_iter_get_index(it2) - z_vector_iter_get_index(it1);
                } else {
                        assert(it2_segment == src->_priv.next);
                        assert(z_vector_iter_get_index(it2) == 0);
                        n = z_vector_segment_get_size(src) - z_vector_iter_get_index(it1);
                }
                z_object_unref(Z_OBJECT(it2_segment));
		assert(n >= 0);

		/* increase the size of the vector */
		int size = get_size(self);
                int rc = set_size(self, size + n, item_size, storage_mode, NULL, NULL, NULL);

                if (rc) {
                        /* all return codes must be non-positive */
                        assert(rc < 0);
                        n = rc;
                        goto done;
                }

                int index = z_vector_iter_get_index(dest_it);

		/* shift all elements in [dest_it,inf) forward */
                void *base = selfp->data + selfp->start;
                memmove(base + (index + n) * item_size,
                        base + index * item_size,
                        (size - index) * item_size);

		/* insert the new item(s) */
		int i;
                if (item_copy_construct) {
                        int i;

                        if (storage_mode == 0) {
                                for (i=0; i<n; ++i) {
                                        void *data = get_item(src, it1, item_size, storage_mode);
                                        set_item(self, dest_it, data, item_size, storage_mode);

                                        z_vector_iter_increment(dest_it);
                                        z_vector_iter_increment(it1);

                                        int offset = (index + i) * item_size;
                                        item_copy_construct(selfp->data + selfp->start + offset, userdata);
                                }

                        } else {
                                for (i=0; i<n; ++i) {
                                        void *data = get_item(src, it1, item_size, storage_mode);
                                        set_item(self, dest_it, data, item_size, storage_mode);

                                        z_vector_iter_increment(dest_it);
                                        z_vector_iter_increment(it1);

                                        int offset = (index + i) * item_size;
                                        item_copy_construct(*((void **)(selfp->data + selfp->start + offset)), userdata);
                                }
                        }
                } else {
                        for (i=0; i<n; ++i) {
                                void *data = get_item(src, it1, item_size, storage_mode);
                                set_item(self, dest_it, data, item_size, storage_mode);

                                z_vector_iter_increment(dest_it);
                                z_vector_iter_increment(it1);
                        }
                }


done:
		z_object_unref(Z_OBJECT(it1));
		z_object_unref(Z_OBJECT(it2));
		z_object_unref(Z_OBJECT(dest_it));

                return n;
	}

	/* Erase the items in the range [start,end) */
	public int erase(Self *self, ZVectorIter *start, ZVectorIter *end, int item_size, int storage_mode,
                        void *userdata, ZVectorItemCallback item_destruct)
	{
		ZVectorIter *it1;
		ZVectorIter *it2;

		if (start == NULL)
			start = get_begin(self);
                else
                        z_object_ref(Z_OBJECT(start));

		if (end == NULL)
			end = get_end(self);
                else
                        z_object_ref(Z_OBJECT(end));
		
		/* compute the item count */
                ZVectorSegment *it2_segment = z_vector_iter_get_segment(end);

		int n;
                if (self == it2_segment) {
                        n = z_vector_iter_get_index(end) - z_vector_iter_get_index(start);
                } else {
                        assert(it2_segment == selfp->next);
                        assert(z_vector_iter_get_index(end) == 0);
                        n = z_vector_segment_get_size(self) - z_vector_iter_get_index(start);
                }

		if (n >= 0) {
			it1 = z_vector_iter_dup(start);
			it2 = z_vector_iter_dup(end);
		} else {
			it1 = z_vector_iter_dup(end);
			it2 = z_vector_iter_dup(start);
			n = -n;
		}

                z_object_unref(Z_OBJECT(end));
                z_object_unref(Z_OBJECT(start));

		/* call the item destructor on the items that is being removed */
		if (item_destruct) {
			ZVectorIter *temp = z_vector_iter_dup(it1);

			for (; !z_vector_iter_is_equal(temp, it2); z_vector_iter_increment(temp)) {
                                void *item = get_item(self, temp, item_size, storage_mode);
				item_destruct(item, userdata);
			}

			z_object_unref(Z_OBJECT(temp));
		}

		/* shift all elements in [it1,inf) backward */
		int size = get_size(self);
                int it1_index = z_vector_iter_get_index(it1);
                int it2_index = z_vector_iter_get_index(it2);
                void *base = selfp->data + selfp->start;

                if (self == it2_segment) {
                        memmove(base + (it1_index) * item_size,
                                base + (it1_index + n) * item_size,
                                (size - it2_index) * item_size);
                } 

                z_object_unref(Z_OBJECT(it2_segment));

		/* decrease the size of the vector */
		selfp->count = size - n;

		z_object_unref(Z_OBJECT(it2));
		z_object_unref(Z_OBJECT(it1));

                return n;
	}
}

