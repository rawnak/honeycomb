/* ZCO - Cross-platform Application Framework
 * Copyright (C) 2014  Rawnak Jahan Syeda
 *
 * z-default-memory-allocator.zco: Default memory allocator
 * This file is part of ZCO.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ZCO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZCO.  If not, see <http://www.gnu.org/licenses/>.
 */

%h{
#include <z-memory-allocator.h>
#include <z-object.h>
%}

%{
%}

class ZDefaultMemoryAllocator : ZMemoryAllocator
{
	init(Self *self)
	{
	}

	public Self *new(struct zco_context_t *ctx, ZMemoryAllocator *allocator)
	{
		Self *self = GET_NEW(ctx, allocator);
                return self;
        }

        override(ZObject)
        void dispose(ZObject *object)
        {
                Self *self = (Self *) object;
		PARENT_HANDLER(object);
        }

	override(ZMemoryAllocator)
	void * allocate(ZMemoryAllocator *allocator, int size)
        {
                return NULL;
        }

        override(ZMemoryAllocator)
        void * allocate_aligned(ZMemoryAllocator *allocator, int size, int alignment)
        {
                return NULL;
        }

	override(ZMemoryAllocator)
	int try_resize(ZMemoryAllocator *allocator, void *block, int new_size)
        {
                return 0;
        }

        override(ZMemoryAllocator)
        void * resize(ZMemoryAllocator *allocator, void *block, int new_size)
        {
                return NULL;
        }

	override(ZMemoryAllocator)
	void deallocate(ZMemoryAllocator *allocator, void *block)
        {
                return;
        }
}

