/* ZCO - Cross-platform Application Framework
 * Copyright (C) 2014  Syeda Sultana
 *
 * z-vector-iter.zco: Vector iterator
 * This file is part of ZCO.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ZCO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZCO.  If not, see <http://www.gnu.org/licenses/>.
 */

%h{
#include <z-object.h>

struct ZVectorSegment;
typedef struct ZVectorSegment ZVectorSegment;
%}

%{
#include <z-vector-segment.h>
%}

class ZVectorIter : ZObject
{
	private int index;
        private int absolute_index;
        private ZVectorSegment *segment;

	init(Self *self)
	{
		selfp->index = 0;
                selfp->absolute_index = 0;
                selfp->segment = 0;
	}

        override(ZObject) void reset(ZObject *object)
        {
                Self *self = (Self *) object;
		selfp->index = 0;
                selfp->absolute_index = 0;

                PARENT_HANDLER(object);
        }

	public Self *new(struct zco_context_t *ctx)
	{
		Self *self = GET_NEW(ctx);
		return self;
	}

	public Self *dup(ZVectorIter *src)
	{
		Self *self = GET_NEW(src->_global->ctx);

                selfp->segment = src->_priv.segment;
                if (selfp->segment)
                        z_object_ref(Z_OBJECT(selfp->segment));

		set_index(self, get_index(src));

		return self;
	}

        public ZVectorSegment *segment
        {
                get
                {
                        z_object_ref(Z_OBJECT(selfp->segment));
                        return selfp->segment;
                }
                set
                {
                        if (value)
                                z_object_ref(Z_OBJECT(value));

                        if (selfp->segment)
                                z_object_unref(Z_OBJECT(selfp->segment));

                        selfp->segment = value;
                }
        }

	public int absolute_index
	{
		get
		{
			return selfp->absolute_index;
		}
		set
		{
                        if (selfp->absolute_index != value)
                                advance(self, value - selfp->absolute_index);
		}
	}

	public int index
	{
		get
		{
			return selfp->index;
		}
		set
		{
                        ZVectorSegment *it = selfp->segment;

                        selfp->index = value;
                        selfp->absolute_index = 0;

                        if (it) {
                                while ((it = it->prev)) {
                                        selfp->absolute_index += z_vector_segment_get_size(it);
                                }
                        }

                        selfp->absolute_index += value;
                }
	}


	public void assign(Self *self, ZVectorIter *src)
	{
		ZVectorSegment *segment = get_segment(src);
		set_segment(self, segment);
		z_object_unref(Z_OBJECT(segment));

		set_index(self, get_index(src));
	}

	public void advance(Self *self, int steps)
	{
		int segment_size;

		selfp->index += steps;
                selfp->absolute_index += steps;

		if (steps > 0) {
			while (selfp->segment->next && selfp->index >= (segment_size = z_vector_segment_get_size(selfp->segment))) {
				selfp->index -= segment_size;
				selfp->segment = selfp->segment->next;
			}

		} else if (steps < 0) {
			while (selfp->index < 0) {
				if (!selfp->segment->prev)
					break;

				selfp->segment = selfp->segment->prev;
				selfp->index += z_vector_segment_get_size(selfp->segment);
			}

		}
	}

	public void increment(Self *self)
	{
		int segment_size;

		++selfp->index;
                ++selfp->absolute_index;

		while (selfp->segment->next && selfp->index >= (segment_size = z_vector_segment_get_size(selfp->segment))) {
			selfp->index -= segment_size;
			selfp->segment = selfp->segment->next;
		}
	}
	
	public void decrement(Self *self)
	{
		--selfp->index;
                --selfp->absolute_index;

		while (selfp->index < 0) {
			if (!selfp->segment->prev)
				break;

			selfp->segment = selfp->segment->prev;
			selfp->index += z_vector_segment_get_size(selfp->segment);
		}
	}

	public int is_equal(Self *self, Self *other)
	{
		return selfp->segment == other->_priv.segment && selfp->index == get_index(other);
	}

	public int is_lte(Self *self, Self *other)
	{
		if (selfp->segment == other->_priv.segment) {
			return selfp->index <= get_index(other);
		} else {
			ZVectorSegment *segment = selfp->segment->next;

			while (segment && segment != other->_priv.segment) {
				segment = segment->next;
			}

			return segment == other->_priv.segment;
		}
	}

	public int is_gte(Self *self, Self *other)
	{
		if (selfp->segment == other->_priv.segment) {
			return selfp->index >= get_index(other);
		} else {
			ZVectorSegment *segment = selfp->segment->prev;

			while (segment && segment != other->_priv.segment) {
				segment = segment->prev;
			}

			return segment == other->_priv.segment;
		}
	}

	/* Indicates if the specified iterator is within the bounds
	   of the vector */
	public int is_in_bound(ZVectorIter *self)
	{
                return z_vector_segment_is_in_bound(selfp->segment, self);
	}
}

