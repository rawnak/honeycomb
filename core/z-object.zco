/* ZCO - Cross-platform Application Framework
 * Copyright (C) 2014  Syeda Sultana
 *
 * z-object.zco: Base class for all objects
 * This file is part of ZCO.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ZCO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZCO.  If not, see <http://www.gnu.org/licenses/>.
 */

%h{
#define likely(x)    __builtin_expect((x),1)
#define unlikely(x)  __builtin_expect((x),0)

struct ZObject;
typedef void(*ZObjectSignalHandler)(struct ZObject *self, ...);

struct ZMemoryAllocator;
typedef struct ZMemoryAllocator ZMemoryAllocator;
%}

%{
#include <assert.h>
#include <z-map.h>
#include <z-vector.h>
#include <z-vector-iter.h>
#include <z-closure.h>
#include <z-closure-marshal.h>
#include <z-object-tracker.h>
#include <z-string.h>
%}

class ZObject 
{
	public void *class_base;
	public virtual ZCommonGlobal *real_global;
	private unsigned int ref_count;
	private void *attached_properties;
	private void *signal_map;
        private ZMemoryAllocator *allocator;

	init(Self *self)
	{
		selfp->ref_count = 1;
		selfp->attached_properties = 0;
		selfp->signal_map = 0;
	}

        global virtual void class_destroy(ZObjectGlobal *gbl)
        {
        }

        private void cleanup_attached_properties(Self *self)
        {
		ZVector *attached_properties = selfp->attached_properties;

		if (attached_properties) {
			ZVectorIter *it, *end;

			/* iterate through all attached properties */
			it = z_vector_get_begin(attached_properties);
			end = z_vector_get_end(attached_properties);

			for (; !z_vector_iter_is_equal(it, end); z_vector_iter_increment(it)) {
				/* the vector contains a list of maps that has a pointer to 'self'.
				   our goal is to remove 'self' from the map */
				ZMap *map = (ZMap *) z_vector_get_item(attached_properties, it);

				/* remove the pointer */
				ZMapIter *x = z_map_find(map, self);
				z_map_erase1(map, x);
				unref(Z_OBJECT(x));
			}

			unref(Z_OBJECT(end));
			unref(Z_OBJECT(it));
			unref(Z_OBJECT(attached_properties));

			selfp->attached_properties = NULL;
		}

        }

        public virtual void reset(Self *self)
        {
                /* This ensures that reset() is not called by someone other
                   than the object tracker */
                assert(selfp->ref_count == 0);
		selfp->ref_count = 1;

                cleanup_attached_properties(self);

                /* No need to worry about signal_map. Since we ref(self) when
                   a signal is connected and unref(self) when it is
                   disconnected, all closure lists must be empty before self
                   can have a reference count of 0 */
        }

        public virtual void __delete(Self *self)
        {
                /* This method must be overridden by derived classes. The
                   derived classes must NOT call PARENT_HANDLER */
                abort();
        }

	public virtual void dispose(Self *self)
	{
                cleanup_attached_properties(self);

		ZMap *signal_map = selfp->signal_map;
		if (signal_map) {
			unref(Z_OBJECT(signal_map));
			selfp->signal_map = NULL;
		}

                __delete(self);
	}

	public void ref(Self *self)
	{
		++selfp->ref_count;
	}

	public void unref(Self *self)
	{
		assert(selfp->ref_count > 0);
		if (--selfp->ref_count == 0) {
                        if (selfp->allocator) {
                                ZObjectTracker *object_tracker = z_memory_allocator_get_object_tracker(selfp->allocator);
                                if (object_tracker) {
                                        z_object_tracker_destroy(object_tracker, self);
                                        unref(Z_OBJECT(object_tracker));
                                        return;
                                } 
                        } 

                        dispose(self);
                }
        }

	private ZObjectSignalHandler lookup_method(Self *self, char *method_name)
	{
		/* This reinterpret cast is only valid for the fields that
		   are common between the source (unknown) *Global type and
		   ZObjectGlobal. Since we are interested in the vtable information,
		   we can perform the cast */
		ZCommonGlobal *gbl = ((ZObjectClass *) self->class_base)->real_global;


		int *vtable_off_list = gbl->vtable_off_list;
		int vtable_off_size = gbl->vtable_off_size;
		int i;

		for (i=vtable_off_size-1; i>=0; --i) {
			int offset = vtable_off_list[i];

			/* -1 indicates that this object is not derived from
			   a parent class with the type id 'i' */
			if (offset == -1)
				continue;

			gbl = *((ZCommonGlobal **) zco_get_ctx_type(CTX_FROM_OBJECT(self), i));
			ZMap *method_map = (ZMap *) gbl->method_map;
			ZMapIter *it = z_map_find(method_map, method_name);

			if (it) {
				ZObjectSignalHandler handler = z_map_get_value(method_map, it);
				unref(Z_OBJECT(it));
				return handler;
			}
		}

		return NULL;
	}

	public void * connect(Self *self, char *name, ZObject *target, char *method_name, void *userdata)
	{
		ZClosure *closure;
		ZObjectSignalHandler handler;

		assert(selfp->signal_map != NULL);

                /* Increase the reference count of self so it stays alive for
                   the disconnect() call. */
                ref(self);

		/* lookup handler from method_name */
		handler = lookup_method(target, method_name);
		assert(handler != NULL);

		/* create a closure */
		closure = z_closure_new(CTX_FROM_OBJECT(self), ALLOCATOR_FROM_OBJECT(self));

		z_closure_set_marshal(closure, (ZClosureMarshal *) CTX_FROM_OBJECT(self)->marshal);
		z_closure_set_target(closure, target);
		z_closure_set_handler(closure, handler);
		z_closure_set_userdata(closure, userdata);

		/* locate signal's closure list by name */
		ZMapIter *it = z_map_find(selfp->signal_map, name);
		assert(it != NULL);
		ZVector *closure_list = z_map_get_value(selfp->signal_map, it);
		unref(Z_OBJECT(it));

		/* add new closure into the signal */
		z_vector_push_back(closure_list, closure);

		return closure;
	}

	public void disconnect(Self *self, char *name, void *key)
	{
		assert(selfp->signal_map != NULL);

		/* locate signal's closure list by name */
		ZMapIter *map_iter = z_map_find(selfp->signal_map, name);
		assert(map_iter != NULL);
		ZVector *closure_list = z_map_get_value(selfp->signal_map, map_iter);
		unref(Z_OBJECT(map_iter));

		/* remove the closure from the list */
		ZVectorIter *it = z_vector_get_begin(closure_list);
		ZVectorIter *end = z_vector_get_end(closure_list);

		while (!z_vector_iter_is_equal(it, end)) {
			void *current_key = z_vector_get_item(closure_list, it);

			if (current_key == key) {
				z_vector_erase1(closure_list, it);
				break;
			} else {
				z_vector_iter_increment(it);
			}
		}

		unref(Z_OBJECT(end));
		unref(Z_OBJECT(it));

                unref(self);
	}

	public void register_signal(Self *self, char *name)
	{
		/* create signal map (if necessary) */
		if (!selfp->signal_map) {
			selfp->signal_map = z_map_new(CTX_FROM_OBJECT(self), ALLOCATOR_FROM_OBJECT(self));
			z_map_set_compare(selfp->signal_map, map_compare);
			z_map_set_key_destruct(selfp->signal_map, (ZMapItemCallback) free);
			z_map_set_value_destruct(selfp->signal_map, (ZMapItemCallback) unref);
		}

		/* locate signal's closure list by name */
		ZMapIter *it = z_map_find(selfp->signal_map, name);

		if (!it) {
			ZVector *closure_list = z_vector_new(CTX_FROM_OBJECT(self), ALLOCATOR_FROM_OBJECT(self));
                        z_vector_set_item_size(closure_list, 0);
			z_vector_set_item_destruct(closure_list, (ZVectorItemCallback) unref);
			z_map_insert(selfp->signal_map, strdup(name), closure_list);
		} else {
                        z_object_unref(Z_OBJECT(it));
                }
	}


	/*** INTERNAL METHODS ***/

	public int emit_signal(Self *self, char *name, void *argv)
	{
		assert(selfp->signal_map != NULL);

		/* locate signal's closure list by name */
		ZMapIter *map_iter = z_map_find(selfp->signal_map, name);
		assert(map_iter != NULL);
		ZVector *closure_list = z_map_get_value(selfp->signal_map, map_iter);
		unref(Z_OBJECT(map_iter));

		/* remove the closure from the list */
		ZVectorIter *it = z_vector_get_begin(closure_list);
		ZVectorIter *end = z_vector_get_end(closure_list);
		int rc = 0;

		while (!z_vector_iter_is_equal(it, end)) {
			ZClosure *closure = ((ZClosure *) z_vector_get_item(closure_list, it));
			rc = z_closure_invoke(closure, (ZVector *) argv);

			if (rc == 1)
				break;

			z_vector_iter_increment(it);
		}

		unref(Z_OBJECT(end));
		unref(Z_OBJECT(it));
		return rc;
	}

	public void add_attached_property_map(Self *self, void *map)
	{
		if (selfp->attached_properties == 0) {
			selfp->attached_properties = z_vector_new(CTX_FROM_OBJECT(self), ALLOCATOR_FROM_OBJECT(self));
                        z_vector_set_item_size(selfp->attached_properties, sizeof(void *));
                }

		/* keep note of the maps that has a pointer to 'self' */
		z_vector_push_back((ZVector *) selfp->attached_properties, map);
	}

	private int map_compare(ZMap *map, const void *a, const void *b)
	{
		return strcmp(a, b);
	}

        public ZMemoryAllocator * allocator_ptr
        {
                get
                {
                        return selfp->allocator;
                }
                set
                {
                        selfp->allocator = value;
                }
        }
}

