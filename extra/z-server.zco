/* ZCO - Cross-platform Application Framework
 * Copyright (C) 2014  Rawnak Jahan Syeda
 *
 * z-server.zco: Server main loop
 * This file is part of ZCO.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ZCO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZCO.  If not, see <http://www.gnu.org/licenses/>.
 */

%h{
#include <zco-app-context.h>
#include <z-object.h>
#include <z-socket.h>

#include <fcntl.h>
#include <netinet/in.h>
#include <signal.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <errno.h>
#include <stdio.h>

%}

%{
#include <z-in-out-multiplexer.h>
#include <z-bind-util.h>
#include <unistd.h>
%}

class ZServer : ZObject
{
        private ZBind *cb_new_client;

        /* The socket info for the server */
        private ZSocket *server_socket;

        /* Internal flags */
        private int is_running;

        init(Self *self)
        {
                /* Create the ZSocket object for the server socket */
                selfp->server_socket = z_socket_new(CTX_FROM_OBJECT(self), ALLOCATOR_FROM_OBJECT(self));
                z_socket_declare_family(selfp->server_socket, AF_INET6);
                z_socket_set_ipv6_address(selfp->server_socket, in6addr_any);
                z_socket_set_flowinfo(selfp->server_socket, 0);

                selfp->is_running = 0;
                selfp->cb_new_client = NULL;
        }

        override(ZObject) void reset(ZObject *object)
        {
                Self *self = (Self *) object;

                /* Stop the server */
                stop(self);

                /* Release references to event handlers */
                set_on_new_client(self, NULL);

                /* Reset IP address information */
                z_socket_clear(selfp->server_socket);
                z_socket_declare_family(selfp->server_socket, AF_INET6);
                z_socket_set_ipv6_address(selfp->server_socket, in6addr_any);
                z_socket_set_flowinfo(selfp->server_socket, 0);

                PARENT_HANDLER(object);
        }

	override(ZObject) void dispose(ZObject *object)
	{
                Self *self = (Self *) object;

                /* Stop the server */
                stop(self);

                /* Release references to event handlers */
                set_on_new_client(self, NULL);

                /* Release the server socket object */
                z_object_unref(Z_OBJECT(selfp->server_socket));

                PARENT_HANDLER(object);
	}

	public Self *new(struct zco_context_t *ctx, ZMemoryAllocator *allocator)
	{
		Self *self = GET_NEW(ctx, allocator);
		return self;
	}

        public ZBind * on_new_client
        {
                set
                {
                        if (selfp->cb_new_client)
                                z_object_unref(Z_OBJECT(selfp->cb_new_client));

                        selfp->cb_new_client = value;

                        if (selfp->cb_new_client)
                                z_object_ref(Z_OBJECT(selfp->cb_new_client));
                }
        }

        private void new_connection_callback(ZBind *bind, Self *self, uint32_t event_flags)
        {
                z_object_ref(Z_OBJECT(self));

                /* Wait for client connection. This should be instantanous since we
                   are already notified that there is an activity on the server socket. */
                ZSocket *client_socket = z_socket_accept_connection(selfp->server_socket);
                post_task_with_socket(self, selfp->cb_new_client, client_socket);


                z_object_unref(Z_OBJECT(self));
        }

        public int start(Self *self, int port)
        {
                int rc;

                if (selfp->is_running)
                        return -EBUSY;

                /* Set the specified port number into the socket */
                z_socket_set_port(selfp->server_socket, port);

                /* Set socket to passive mode */
                if ((rc = z_socket_enable_passive_mode(selfp->server_socket, 5)))
                        return rc;

                selfp->is_running = 1;

                /* Create a closure that will be invoked when a new connection is accepted. Note that 'self'
                   is added to the bind but its reference count is not incremented. This is so we do not have
                   a circular reference. The destruction of the ZServer object will cause the stop() function
                   to be called. The stop() function will unregister all IO binds and so it will not have an
                   undeclared reference to 'self' anymore. */
                ZBind *task = create_c_bind(Z_OBJECT(self), (ZBindHandler) new_connection_callback);
                z_bind_append_ptr(task, self);

                ZEventLoop *ev = zco_app_context_get_event_loop_ptr(CTX_FROM_OBJECT(self));
                ZInOut *inout = z_socket_get_inout(selfp->server_socket);
                z_in_out_multiplexer_subscribe_fd((ZObject *) ev, inout, task);
                z_object_unref(Z_OBJECT(inout));

                z_object_unref(Z_OBJECT(task));
 
                return 0;
        }

        public int stop(Self *self)
        {
                if (!selfp->is_running)
                        return -EPERM;

                selfp->is_running = 0;

                return 0;
        }

        private void post_task_with_socket(Self *self, ZBind *task, ZSocket *socket)
        {
                if (!task)
                        return;

                /* Clone the bind so we can append additional arguments */
                ZBind *new_task = z_bind_new(CTX_FROM_OBJECT(self), ALLOCATOR_FROM_OBJECT(self));
                z_bind_assign(new_task, task);

                /* Append a pointer to the socket */
                z_bind_append_ptr(new_task, socket);

                /* Append a pointer to self */
                z_bind_append_ptr(new_task, self);

                /* Execute the task */
                z_bind_invoke(new_task);

                z_object_unref(Z_OBJECT(new_task));
        }
}

