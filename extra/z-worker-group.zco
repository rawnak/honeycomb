/* ZCO - Cross-platform Application Framework
 * Copyright (C) 2014  Rawnak Jahan Syeda
 *
 * z-worker-group.zco: Thread pool
 * This file is part of ZCO.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ZCO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZCO.  If not, see <http://www.gnu.org/licenses/>.
 */

%h{
#include <z-object.h>
#include <z-bind.h>
#include <z-c-closure-marshal.h>
#include <z-map.h>
%}

%{
#include <zco-app-context.h>
#include <z-string.h>
#include <stdio.h>
#include <z-event-loop-linux.h>
#include <z-bind-util.h>

/* In any C application, the process starts with only one thread (the main thread).
   It will almost always be dedicated for UI and its event loop will be tied to the
   UI framework that is being used.

   To avoid UI unresponsiveness, the application code should run in a separate thread
   (the application thread). This thread will run almost all of the application code
   and will communicate with the UI thread only when it needs to update the display
   or retrieve user input.

   The application thread will maintain a worker group which is essentially a
   thread pool. The application thread will schedule tasks on these worker threads.
   This will allow the application thread to continue to run while parallelizing
   tasks onto other threads. A common use of a worker is to perform IO operations.
 */

#define INT_TO_PTR(x) ((void *) ((unsigned long) (x)))
#define PTR_TO_INT(x) ((int64_t) ((long) (x)))

struct worker_t
{
        struct zco_context_t ctx;
        ZEventLoop *event_loop;
};

%}

class ZWorkerGroup : ZObject
{
        private ZVector *workers;
        private ZMap *responses;
        private unsigned long count;

	init(Self *self)
	{
                struct zco_context_t *ctx = CTX_FROM_OBJECT(self);
                ZMemoryAllocator *allocator = ALLOCATOR_FROM_OBJECT(self);
                selfp->count = 0;

                /* Create the workers list */
                selfp->workers = z_vector_new(ctx, allocator);
                z_vector_set_item_size(selfp->workers, sizeof(struct worker_t));
                z_vector_set_item_construct(selfp->workers, (ZVectorItemCallback) add_worker);
                z_vector_set_item_destruct(selfp->workers, (ZVectorItemCallback) remove_worker);

                /* Create the responses map */
                selfp->responses = z_map_new(ctx, allocator);
                z_map_set_compare(selfp->responses, map_compare);
                z_map_set_value_destruct(selfp->responses, (ZMapItemCallback) response_destroy);
        }

        public Self *new(struct zco_context_t *ctx, ZMemoryAllocator *allocator)
        {
                Self *self = GET_NEW(ctx, allocator);
                return self;
        }

        override(ZObject)
        void reset(ZObject *object)
        {
                Self *self = (Self *) object;

                /* Clear the responses map */
                z_map_clear(selfp->responses);
                selfp->count = 0;

                /* Clear the workers list */
                set_worker_count(self, 0);
                z_vector_clear(selfp->workers);

                PARENT_HANDLER(object);
       }

        override(ZObject)
        void dispose(ZObject *object)
        {
                Self *self = (Self *) object;

                /* Clear the responses map */
                z_object_unref(Z_OBJECT(selfp->responses));

                /* Clear the workers list */
                set_worker_count(self, 0);
                z_object_unref(Z_OBJECT(selfp->workers));

                PARENT_HANDLER(object);
        }

        private void add_worker(struct worker_t *worker, void *userdata)
        {
                struct zco_context_t *ctx = &worker->ctx;
                zco_app_context_init(ctx);

                ZString *app_name = z_string_new(ctx, ctx->flex_allocator);
                z_string_append_format(app_name, "Worker %p", ctx);
                char *temp = z_string_get_cstring(app_name, Z_STRING_ENCODING_UTF8);
                z_object_unref(Z_OBJECT(app_name));

                worker->event_loop = zco_app_context_get_event_loop_ptr(ctx);

                z_event_loop_set_name(worker->event_loop, temp);
                z_event_loop_run(worker->event_loop);

                free(temp);
        }

        private void remove_worker(struct worker_t *worker, void *userdata)
        {
                zco_app_context_destroy(&worker->ctx);
        }

        private int map_compare(ZMap *self, const void *a, const void *b)
        {
                return PTR_TO_INT(a) - PTR_TO_INT(b);
        }

        private void response_destroy(ZBind *response_bind, void *userdata)
        {
                if (response_bind)
                        z_object_unref(Z_OBJECT(response_bind));
        }

        public int worker_count
        {
                get
                {
                        return z_vector_get_size(selfp->workers);
                }
                set
                {
                        int worker_count = z_vector_get_size(selfp->workers);

                        if (worker_count > value) {
                                /* Notify the worker contexts that we are ready to terminate */
                                ZVectorIter *it, *end;
                                it = z_vector_get_begin(selfp->workers);
                                z_vector_iter_advance(it, value);
                                end = z_vector_get_end(selfp->workers);

                                while (!z_vector_iter_is_equal(it, end))
                                {
                                        struct worker_t *worker = z_vector_get_item(selfp->workers, it);
                                        z_event_loop_quit(worker->event_loop);
                                        z_vector_iter_increment(it);
                                }

                                z_object_unref(Z_OBJECT(end));
                                z_object_unref(Z_OBJECT(it));
                        }

                        z_vector_set_size(selfp->workers, value);
                }
        }

        private struct worker_t *get_next_worker(Self *self)
        {
                int worker_count = get_worker_count(self);
                ZVectorIter *it = z_vector_get_begin(selfp->workers);
                z_vector_iter_advance(it, selfp->count % worker_count);
                struct worker_t *worker = z_vector_get_item(selfp->workers, it);
                z_object_unref(Z_OBJECT(it));

                return worker;
        }

        private void proxy_function(ZBind *proxy_bind, Self *self, ZBind *response_bind, uint32_t count)
        {
                /* Replace the 'NULL' with the real response bind */
                z_map_assign(selfp->responses, INT_TO_PTR(count), response_bind);

                /* Iterate through the map, starting from the first element up
                   until an element is found that has a NULL value. The list of
                   elements in the map with a non-NULL value are invoked as long
                   as there is no hole in between them. */
                ZMapIter *it, *end;

                it = z_map_get_begin(selfp->responses);
                end = z_map_get_end(selfp->responses);

                while (!z_map_iter_is_equal(it, end)) {
                        response_bind = z_map_get_value(selfp->responses, it);

                        if (!response_bind)
                                break;

                        z_bind_invoke(response_bind);
                        z_map_iter_increment(it);
                }

                /* Remove the responses that have been invoked */
                z_map_erase(selfp->responses, NULL, it);

                z_object_unref(Z_OBJECT(end));
                z_object_unref(Z_OBJECT(it));

                /* Release the reference that we added to self for this particular bind */
                z_object_unref(Z_OBJECT(self));
        }

        public int post_task(Self *self, ZBind *bind, ZBind *response_bind, int in_order)
        {
                struct worker_t *worker = get_next_worker(self);
                int rc;

                if (in_order) {
                        /* Create a proxy bind. This bind will be invoked as the response bind instead
                           of the response bind that is specified by the caller. The handler for the proxy
                           bind will ensure that the responses are invoked in order */

                        ZBind *proxy_bind = z_bind_util_create_c_bind(Z_OBJECT(bind), (ZBindHandler) proxy_function);
                        z_bind_append_ptr(proxy_bind, self);
                        z_bind_append_ptr(proxy_bind, response_bind);
                        z_bind_append_uint32(proxy_bind, selfp->count);

                        /* Post the task to the target worker */
                        rc = z_event_loop_post_task(worker->event_loop, bind, proxy_bind, 0, 0);

                        if (rc == 0) {
                                /* We need to hold a reference to self so it can stay alive until the proxy function
                                   is invoked. Having the proxy function run without 'self' will not work out well */
                                z_object_ref(Z_OBJECT(self));

                                /* We need to hold a reference to the response bind until it is invoked. It will
                                   be unref'd when the associated element is removed from the responses map */
                                z_object_ref(Z_OBJECT(response_bind));

                                /* Insert a blank slot into the response map. This will serve as a hole so the
                                   proxy bind's handler knows when to stop. This hole will be replaced by the
                                   real response if it is available and so if the loop runs after it has been
                                   replaced, it will not be considered as a hole */
                                z_map_insert(selfp->responses, INT_TO_PTR(selfp->count), NULL);
                        }

                        /* We no longer need a reference to the proxy bind */
                        z_object_unref(Z_OBJECT(proxy_bind));

                } else {
                        /* Post the task to the target worker */
                        rc = z_event_loop_post_task(worker->event_loop, bind, response_bind, 0, 0);
                }

                if (rc == 0) {
                        /* Increment the counter. This counter is used to determine which task was scheduled
                           after another */
                        ++selfp->count;
                }

                return rc;
        }
}

