/* ZCO - Cross-platform Application Framework
 * Copyright (C) 2014  Rawnak Jahan Syeda
 *
 * z-guid.zco: GUID helper class
 * This file is part of ZCO.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ZCO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZCO.  If not, see <http://www.gnu.org/licenses/>.
 */

%h{
#include <z-string.h>

typedef uint64_t uint128_t[2];
%}

%{
#include <stdio.h>
static char random_state[256];
%}

class ZGuid : ZObject
{
        private uint128_t data;

        init(Self *self)
        {
                memset(selfp->data, 0, 16);
        }

        class_init(struct zco_context_t *ctx, ZGuidClass *klass)
        {
                /* Seed the randomizer based on the current time */
                initstate(time(NULL), random_state, sizeof(random_state));
                setstate(random_state);
        }

        public Self *new(struct zco_context_t *ctx, ZMemoryAllocator *allocator)
        {
                Self *self = GET_NEW(ctx, allocator);
                return self;
        }

        override(ZObject) void reset(ZObject *object)
        {
                Self *self = (Self *) object;
                memset(selfp->data, 0, 16);
                PARENT_HANDLER(object);
        }

        override(ZObject) void dispose(ZObject *object)
        {
                Self *self = (Self *) object;
                PARENT_HANDLER(object);
        }

        public void randomize(Self *self)
        {
                uint32_t *f32 = (uint32_t *) selfp->data;

                f32[0] = random();
                f32[1] = random();
                f32[2] = random();
                f32[3] = random();
        }

        public int compare(Self *self, Self *other)
        {
                uint64_t *a = selfp->data;

                self = other;
                uint64_t *b = selfp->data;

                if (a[0] < b[0])
                        return -1;

                else if (a[0] > b[0])
                        return 1;

                else if (a[1] < b[1])
                        return -1;

                else if (a[1] > b[1])
                        return 1;

                else
                        return 0;
        }

        private int hex_to_byte(uint32_t hi_nibble, uint32_t lo_nibble)
        {
                int byte;
                char ch;

                /* high nibble */
                ch = hi_nibble;

                if (ch >= '0' && ch <= '9')
                        byte = ((ch - '0') & 0xf) << 4;

                else if (ch >= 'a' && ch <= 'f')
                        byte = ((ch - 'a' + 10) & 0xf) << 4;

                else
                        return -1;

                /* low nibble */
                ch = lo_nibble;

                if (ch >= '0' && ch <= '9')
                        byte |= (ch - '0') & 0xf;

                else if (ch >= 'a' && ch <= 'f')
                        byte |= (ch - 'a' + 10) & 0xf;

                else
                        return -1;


                return byte;
        }

        private void byte_to_hex(char *hex, int byte)
        {
                unsigned char nibble;

                /* high nibble */
                nibble = byte >> 4;

                if (nibble >= 0 && nibble <= 9)
                        hex[0] = '0' + nibble;
                else 
                        hex[0] = 'a' + nibble - 10;


                /* low nibble */
                nibble = byte & 0xf;

                if (nibble >= 0 && nibble <= 9)
                        hex[1] = '0' + nibble;
                else 
                        hex[1] = 'a' + nibble - 10;
        }

        public int import_from_string(Self *self, ZString *guid)
        {
                ZStringIter *it, *end;

                assert(guid);
                assert(z_string_get_length(guid) == 32);

                it = z_string_get_begin(guid);
                end = z_string_get_end(guid);

                int is_high = 1;
                uint32_t hi_ch = 0;
                uint32_t lo_ch = 0;

                uint8_t *f8 = (uint8_t *) selfp->data;
                int i = 0;
                
                while (!z_string_iter_is_equal(it, end)) {
                        if (is_high) {
                                is_high = 0;
                                hi_ch = z_string_get_char(guid, it);
                                z_string_iter_increment(it);
                                continue;
                        }

                        is_high = 1;
                        lo_ch = z_string_get_char(guid, it);

                        int byte = hex_to_byte(hi_ch, lo_ch);

                        if (byte == -1) {
                                printf("byte at %d is bad: %x:%x\n", i, hi_ch, lo_ch);
                                return -1;
                        }

                        f8[i] = (uint8_t) byte;
                        ++i;
                        z_string_iter_increment(it);
                }

                z_object_unref(Z_OBJECT(end));
                z_object_unref(Z_OBJECT(it));

                return 0;
        }

        public ZString * export_to_string(Self *self)
        {
                ZString *guid = z_string_new(CTX_FROM_OBJECT(self), ALLOCATOR_FROM_OBJECT(self));
                uint8_t *f8 = (uint8_t *) selfp->data;
                int i;

                for (i=0; i<16; ++i) {
                        uint8_t byte = f8[i];

                        char hex[3];
                        byte_to_hex(hex, byte);
                        hex[2] = 0;

                        z_string_append_cstring(guid, hex, Z_STRING_ENCODING_UTF8);
                }

                return guid;
        }
}

