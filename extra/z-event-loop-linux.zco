/* ZCO - Cross-platform Application Framework
 * Copyright (C) 2014  Rawnak Jahan Syeda
 *
 * z-event-loop-linux.zco: Event loop based around epoll
 * This file is part of ZCO.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ZCO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZCO.  If not, see <http://www.gnu.org/licenses/>.
 */

%h{
#include <z-object.h>
#include <z-event-loop-protected.h>
#include <z-i-o-multiplexer.h>
#include <z-set.h>
#include <sys/epoll.h>

/* We require Linux kernel 2.6.37 or higher. The epoll_wait implementation for prior versions
   of the kernel assume an infinite wait time when the specified wait time is larger than
   LONG_MAX / HZ */
#define Z_EVENT_LOOP_MAX_EVENTS 5 

typedef struct epoll_event events_t[Z_EVENT_LOOP_MAX_EVENTS];

%}

%{
#define _GNU_SOURCE
#include <unistd.h>

#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>

#define INT_TO_PTR(x) ((void *) ((unsigned long) (x)))
#define PTR_TO_INT(x) ((int64_t) ((long) (x)))

%}

class ZEventLoopLinux : ZEventLoop, ZIOMultiplexer
{
        private ZMap *fd_map;
        private ZSet *self_pipe_listeners;
        private int ep_fd;
        private int pipe_in;
        private int pipe_out;

	public Self *new(struct zco_context_t *ctx, ZMemoryAllocator *allocator)
	{
		Self *self = GET_NEW(ctx, allocator);
		return self;
	}

        private ZSet * get_listeners(Self *self, int fd, int no_create)
        {
                ZMapIter *it = z_map_find(selfp->fd_map, INT_TO_PTR(fd));
                ZSet *list;

                if (it) {
                        list = z_map_get_value(selfp->fd_map, it);
                        z_object_unref(Z_OBJECT(it));
                        z_object_ref(Z_OBJECT(list));
                        return list;
                }

                if (no_create)
                        return NULL;

                list = z_set_new(CTX_FROM_OBJECT(self), ALLOCATOR_FROM_OBJECT(self));
                z_map_assign(selfp->fd_map, INT_TO_PTR(fd), list);

                z_set_set_compare(list, list_compare);
                z_set_set_key_destruct(list, (ZSetItemCallback) z_object_unref);

                struct epoll_event event;
                event.data.ptr = list;
                event.events = EPOLLIN | EPOLLRDHUP | EPOLLPRI | EPOLLET;
                assert(epoll_ctl(selfp->ep_fd, EPOLL_CTL_ADD, fd, &event) == 0);

                z_object_ref(Z_OBJECT(list));
                return list;
        }

        private int list_compare(ZSet *list, const void *a, const void *b)
        {
                return PTR_TO_INT(a) - PTR_TO_INT(b);
        }

        private int map_compare(ZMap *map, const void *a, const void *b)
        {
                return PTR_TO_INT(a) - PTR_TO_INT(b);
        }

	init(Self *self)
	{
                /* Create an epoll file descriptor */
                assert((selfp->ep_fd = epoll_create1(0)) >= 0);

                /* Create a pipe to send tasks into guest thread */
                int pipe_fds[2];
                assert(pipe(pipe_fds) == 0);

                selfp->pipe_out = pipe_fds[0];
                selfp->pipe_in = pipe_fds[1];

                /* Set file descriptors to non-blocking mode */
                set_fd_flags(selfp->pipe_out, O_NONBLOCK);

                selfp->fd_map = z_map_new(CTX_FROM_OBJECT(self), ALLOCATOR_FROM_OBJECT(self));
                z_map_set_compare(selfp->fd_map, map_compare);
                z_map_set_value_destruct(selfp->fd_map, (ZMapItemCallback) z_object_unref);

                /* Subscribe the output of the pipe to epoll */
                selfp->self_pipe_listeners = get_listeners(self, selfp->pipe_out, 0);
	}

        override(ZObject) void dispose(ZObject *object)
        {
                Self *self = (Self *) object;

                /* Wait for thread to complete */
                z_event_loop_quit(Z_EVENT_LOOP(self));
                z_event_loop_join(Z_EVENT_LOOP(self));

                z_object_unref(Z_OBJECT(selfp->self_pipe_listeners));
                z_object_unref(Z_OBJECT(selfp->fd_map));

                epoll_ctl(selfp->ep_fd, EPOLL_CTL_DEL, selfp->pipe_out, NULL);

                close(selfp->pipe_in);
                close(selfp->pipe_out);
                close(selfp->ep_fd);

                PARENT_HANDLER(object);
        }

        private void set_fd_flags(int fd, int flags)
        {
                int old_flags = fcntl(fd, F_GETFL, 0);
                fcntl(fd, F_SETFL, old_flags | flags);
        }

        override(ZEventLoop) void reload_runqueue(ZEventLoop *ev)
        {
                Self *self = (Self *) ev;

                ZTask *tasks[Z_EVENT_LOOP_MAX_EVENTS];
                struct zco_context_t *ctx = CTX_FROM_OBJECT(self);
                ssize_t nbytes;

                while(1) {
                        nbytes = read(selfp->pipe_out, &tasks[0], sizeof(tasks));

                        if (nbytes == -1) {
                                if (errno == EAGAIN)
                                        break;

                                perror("read");
                                continue;
                        }

                        int i;
                        int count = nbytes / sizeof(ZTask *);

                        for (i=0; i<count; ++i) {
                                ZTask *task = tasks[i];
                                z_event_loop_add_task_to_runqueue(Z_EVENT_LOOP(self), task);
                        }

                };
        }

        private int64_t convert_monotonic_to_timeout(Self *self, uint64_t monotonic)
        {
                /* During the conversion from nanoseconds to milliseconds, the
                   value is rounded up to the nearest integer */
                uint64_t monotonic_ns = z_event_loop_get_monotonic_time(); 
                int64_t timeout_ms = ((int64_t) monotonic - (int64_t) monotonic_ns + 999999) / 1000000;
                return (timeout_ms >= 0)? timeout_ms : 0;
        }

        override(ZEventLoop) void wait_for_signal(ZEventLoop *ev, uint64_t next_task_time)
        {
                Self *self = (Self *) ev;
                int timeout_ms;
                int self_pipe_found;

                do {
                        if (next_task_time)
                                timeout_ms = (int) convert_monotonic_to_timeout(self, next_task_time);
                        else
                                timeout_ms = -1;

                        /* No need to call epoll_pwait if we already know that the next scheduled
                           is ready to be executed. */
                        if (timeout_ms == 0)
                                return;

                        /* epoll_pwait first calls sigprocmask to set the signal mask to the
                           specified 'sigmask', calls the standard epoll_wait() function and
                           then resets the signal mask with another call to sigprocmask, all
                           atomically. although we are not supposed to use sigprocmask in a
                           multi-threaded application, we can still get away with it as long
                           as we don't block the SIGCANCEL and SIGSETXID signals. */
                        sigset_t sigmask;
                        struct epoll_event ep_events[Z_EVENT_LOOP_MAX_EVENTS];
                        sigemptyset(&sigmask);

                        self_pipe_found = 0;
                        int nfds = epoll_pwait(selfp->ep_fd, ep_events, Z_EVENT_LOOP_MAX_EVENTS, timeout_ms, &sigmask);
                        int i;

                        for (i=0; i<nfds; ++i) {
                                struct epoll_event *ev = ep_events + i;
                                ZSet *list = (ZSet *) ev->data.ptr;

                                if (list == selfp->self_pipe_listeners) {
                                        self_pipe_found = 1;

                                } else {
                                        ZSetIter *it = z_set_get_begin(list);
                                        ZSetIter *end = z_set_get_end(list);

                                        while (!z_set_iter_is_equal(it, end)) {
                                                ZBind *task = (ZBind *) z_set_get_key(list, it);
                                                z_set_iter_increment(it);

                                                ZBind *new_task = z_bind_new(CTX_FROM_OBJECT(self), ALLOCATOR_FROM_OBJECT(self));
                                                z_bind_assign(new_task, task);
                                                z_bind_append_uint32(new_task, convert_flags(ev->events));
                                                z_bind_invoke(new_task);
                                                z_object_unref(Z_OBJECT(new_task));
                                        }

                                        z_object_unref(Z_OBJECT(end));
                                        z_object_unref(Z_OBJECT(it));
                                }
                        }

                } while (!self_pipe_found);
        }

        private uint32_t convert_flags(uint32_t flag)
        {
                uint32_t new_flag = 0;

                if (flag & EPOLLIN)           new_flag |= IO_MULTIPLEXER_IN;
                if (flag & EPOLLPRI)          new_flag |= IO_MULTIPLEXER_PRI;
                if (flag & EPOLLOUT)          new_flag |= IO_MULTIPLEXER_OUT;
                if (flag & EPOLLRDNORM)       new_flag |= IO_MULTIPLEXER_RDNORM;
                if (flag & EPOLLRDBAND)       new_flag |= IO_MULTIPLEXER_RDBAND;
                if (flag & EPOLLWRNORM)       new_flag |= IO_MULTIPLEXER_WRNORM;
                if (flag & EPOLLWRBAND)       new_flag |= IO_MULTIPLEXER_WRBAND;
                if (flag & EPOLLMSG)          new_flag |= IO_MULTIPLEXER_MSG;
                if (flag & EPOLLERR)          new_flag |= IO_MULTIPLEXER_ERR;
                if (flag & EPOLLHUP)          new_flag |= IO_MULTIPLEXER_HUP;
                if (flag & EPOLLRDHUP)        new_flag |= IO_MULTIPLEXER_RDHUP;
                if (flag & EPOLLWAKEUP)       new_flag |= IO_MULTIPLEXER_WAKEUP;

                return new_flag;
        }

	override(ZIOMultiplexer)
        int subscribe_fd(ZObject *io_multiplexer, int fd, ZBind *task)
        {
                Self *self = (Self *) io_multiplexer;
                ZSet *listeners = get_listeners(self, fd, 0);
                int rc = z_set_insert(listeners, task);
                z_object_unref(Z_OBJECT(listeners));

                if (rc == 0)
                        z_object_ref(Z_OBJECT(task));

                return rc;
        }

	override(ZIOMultiplexer)
        int unsubscribe_fd(ZObject *io_multiplexer, int fd, ZBind *task)
        {
                Self *self = (Self *) io_multiplexer;
                ZSet *listeners = get_listeners(self, fd, 1);

                if (!listeners)
                        return -EINVAL;

                ZSetIter *it = z_set_find(listeners, task);
                z_object_unref(Z_OBJECT(listeners));

                if (it) {
                        z_set_erase1(listeners, it);
                        z_object_unref(Z_OBJECT(it));
                        return 0;
                }

                return -EINVAL;
        }

        override(ZEventLoop) int add_to_task_queue(ZEventLoop *ev, ZTask *task)
        {
                Self *self = (Self *) ev;
                /* Send the address of the task to the guest thread through the pipe */
                int rc = write(selfp->pipe_in, &task, sizeof(ZTask *));
                return (rc < 0)? -errno : 0;
        }
}

