/* ZCO - Cross-platform Application Framework
 * Copyright (C) 2014  Rawnak Jahan Syeda
 *
 * z-net-stream.zco: Network stream
 * This file is part of ZCO.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ZCO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZCO.  If not, see <http://www.gnu.org/licenses/>.
 */

%h{
#include <z-stream.h>
#include <z-socket.h>
#include <z-object.h>
#include <z-string.h>
#include <netinet/in.h>
%}

%{
#include <z-vector-segment.h>
#include <sys/sendfile.h>
#include <unistd.h>
#include <errno.h>
%}

class ZNetStream : ZObject
{
        private struct sockaddr info;
        private ZSocket *socket;
        private ZStream *stream;

	init(Self *self)
	{
                selfp->socket = z_socket_new(CTX_FROM_OBJECT(self), ALLOCATOR_FROM_OBJECT(self));
                selfp->stream = z_stream_new(CTX_FROM_OBJECT(self), ALLOCATOR_FROM_OBJECT(self));
	}

        override(ZObject) void reset(ZObject *object)
        {
                Self *self = (Self *) object;
                z_socket_clear(selfp->socket);

                z_object_unref(Z_OBJECT(selfp->stream));
                selfp->stream = z_stream_new(CTX_FROM_OBJECT(self), ALLOCATOR_FROM_OBJECT(self));

                PARENT_HANDLER(object);
        }

	override(ZObject) void dispose(ZObject *object)
	{
		Self *self = (Self *) object;
                z_object_unref(Z_OBJECT(selfp->stream));
		PARENT_HANDLER(object);
	}

	public Self *new(struct zco_context_t *ctx, ZMemoryAllocator *allocator)
	{
		Self *self = GET_NEW(ctx, allocator);
		return self;
	}

        public ZSocket * socket
        {
                get
                {
                        if (selfp->socket)
                                z_object_ref(Z_OBJECT(selfp->socket));

                        return selfp->socket;
                }
                set
                {
                        if (selfp->socket)
                                z_object_unref(Z_OBJECT(selfp->socket));

                        selfp->socket = value;

                        if (selfp->socket)
                                z_object_ref(Z_OBJECT(selfp->socket));
                }
        }

        public void terminate(Self *self)
        {
                z_stream_terminate(selfp->stream);
        }
}

