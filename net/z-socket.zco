/* ZCO - Cross-platform Application Framework
 * Copyright (C) 2014  Rawnak Jahan Syeda
 *
 * z-socket.zco: Wrapper on socket APIs
 * This file is part of ZCO.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ZCO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZCO.  If not, see <http://www.gnu.org/licenses/>.
 */

%h{
#include <z-stream.h>
#include <z-object.h>
#include <z-string.h>
#include <z-in-out.h>
#include <netinet/in.h>

union sock_address {
        struct sockaddr         common;
        struct sockaddr_in      ipv4;
        struct sockaddr_in6     ipv6;
};

struct ZSocketSerialized {
        union sock_address info;
        int fd;
};

typedef struct ZSocketSerialized ZSocketSerialized;


%}
%{

#define _GNU_SOURCE

#include <z-bind-util.h>
#include <z-in-out-multiplexer.h>
#include <zco-app-context.h>
#include <z-socket.h>
#include <z-vector-segment.h>
#include <sys/sendfile.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <errno.h>
#include <fcntl.h>

struct socket_serialized {
        union sock_address info;
        int fd;
};

%}

class ZSocket : ZObject
{
        private union sock_address info;
        private int is_ready;
        private ZInOut *inout;
        private ZBind *dispatcher_task;
        private ZBind *cb_ready;
        private ZBind *cb_disconnect;
        private ZBind *cb_hangup;
        private ZBind *cb_error;
        private ZBind *cb_readable;
        private ZBind *cb_writable;

	init(Self *self)
	{
                selfp->dispatcher_task = NULL;
                selfp->cb_ready = NULL;
                selfp->cb_disconnect = NULL;
                selfp->cb_hangup = NULL;
                selfp->cb_error = NULL;
                selfp->cb_readable = NULL;
                selfp->cb_writable = NULL;
                selfp->inout = NULL;

                clear(self);
	}

        override(ZObject) void reset(ZObject *object)
        {
                Self *self = (Self *) object;
                clear(self);
                PARENT_HANDLER(object);
        }

        override(ZObject) void dispose(ZObject *object)
        {
                Self *self = (Self *) object;

                clear(self);
                ZEventLoop *ev = zco_app_context_get_event_loop_ptr(CTX_FROM_OBJECT(self));
                PARENT_HANDLER(object);
        }

	public Self *new(struct zco_context_t *ctx, ZMemoryAllocator *allocator)
	{
		Self *self = GET_NEW(ctx, allocator);
		return self;
	}

        public void clear(Self *self)
        {
                set_on_ready(self, NULL);
                set_on_disconnect(self, NULL);
                set_on_hangup(self, NULL);
                set_on_error(self, NULL);
                set_on_readable(self, NULL);
                set_on_writable(self, NULL);

                memset(&selfp->info, 0, sizeof(union sock_address));

                set_inout(self, NULL);
                selfp->is_ready = 0;
        }

        public void shutdown_incoming(Self *self)
        {
                set_on_readable(self, NULL);
                z_in_out_socket_shutdown(selfp->inout, SHUT_RD);
        }

        public void shutdown_outgoing(Self *self)
        {
                set_on_writable(self, NULL);
                z_in_out_socket_shutdown(selfp->inout, SHUT_WR);
        }

        public void shutdown_both(Self *self)
        {
                set_on_readable(self, NULL);
                set_on_writable(self, NULL);
                z_in_out_socket_shutdown(selfp->inout, SHUT_RDWR);
        }

        public int status
        {
                get
                {
                        int value;
                        socklen_t size = sizeof(value);
                        z_in_out_get_socket_options(selfp->inout, SOL_SOCKET, SO_ERROR, &value, &size);
                        return value;
                }
        }

        public int is_ipv4
        {
                get
                {
                        return (selfp->info.common.sa_family == AF_INET)? 1 : 0;
                }
        }

        public int is_ipv6
        {
                get
                {
                        return (selfp->info.common.sa_family == AF_INET6)? 1 : 0;
                }
        }

        public in_port_t port
        {
                get
                {
                        switch (selfp->info.common.sa_family) {
                        case AF_INET6:
                                return ntohs(selfp->info.ipv6.sin6_port);
                        case AF_INET:
                                return ntohs(selfp->info.ipv4.sin_port);
                        default:
                                /* Unsupported address family */
                                abort();
                        }
                }
                set
                {
                        switch (selfp->info.common.sa_family) {
                        case AF_INET6:
                                selfp->info.ipv6.sin6_port = htons(value);
                                break;
                        case AF_INET:
                                selfp->info.ipv4.sin_port = htons(value);
                                break;
                        default:
                                /* Unsupported address family */
                                abort();
                        }
                }
        }

        public uint32_t flowinfo
        {
                get
                {
                        assert(get_is_ipv6(self));
                        return selfp->info.ipv6.sin6_flowinfo;
                }
                set
                {
                        assert(get_is_ipv6(self));
                        selfp->info.ipv6.sin6_flowinfo = value;
                }
        }

        public struct in6_addr ipv6_address
        {
                get
                {
                        assert(get_is_ipv6(self));
                        return selfp->info.ipv6.sin6_addr;
                }
                set
                {
                        assert(get_is_ipv6(self));
                        selfp->info.ipv6.sin6_addr = value;
                }
        }

        public uint32_t ipv4_address
        {
                get
                {
                        assert(get_is_ipv4(self));
                        return selfp->info.ipv4.sin_addr.s_addr;
                }
                set
                {
                        assert(get_is_ipv4(self));
                        selfp->info.ipv4.sin_addr.s_addr = value;
                }
        }

        public uint32_t scope_id
        {
                get
                {
                        assert(get_is_ipv6(self));
                        return selfp->info.ipv6.sin6_scope_id;
                }
                set
                {
                        assert(get_is_ipv6(self));
                        selfp->info.ipv6.sin6_scope_id = value;
                }
        }

        public int connect_stream(Self *self, ZStream *stream)
        {
                if (selfp->inout == NULL)
                        return -1;

                z_stream_set_input(stream, selfp->inout);
                z_stream_set_output(stream, selfp->inout);

                return 0;
        }

        public int initiate_connection(Self *self)
        {
                socklen_t address_len;

                if (selfp->inout == NULL)
                        return -EBADF;

                switch (selfp->info.common.sa_family) {
                case AF_INET6:
                        address_len = sizeof(struct sockaddr_in6);
                        break;
                case AF_INET:
                        address_len = sizeof(struct sockaddr_in);
                        break;
                default:
                        /* Unsupported address family */
                        abort();
                }

                if (z_in_out_socket_connect(selfp->inout, &selfp->info.common, address_len) != 0) {
                        return -errno;
                }

                return 0;
        }

        public ZInOut * inout
        {
                get
                {
                        if (selfp->inout)
                                z_object_ref(Z_OBJECT(selfp->inout));

                        return selfp->inout;
                }
        }

        private void set_inout(Self *self, ZInOut * inout)
        {
                ZEventLoop *ev = zco_app_context_get_event_loop_ptr(CTX_FROM_OBJECT(self));

                if (selfp->inout != NULL) {
                        assert(z_in_out_multiplexer_unsubscribe_fd((ZObject *) ev, selfp->inout, selfp->dispatcher_task) == 0);
                        z_object_unref(Z_OBJECT(selfp->dispatcher_task));
                        z_object_unref(Z_OBJECT(selfp->inout));
                }

                selfp->inout = inout;

                if (selfp->inout != NULL) {
                        z_object_ref(Z_OBJECT(inout));
                        selfp->dispatcher_task = z_bind_util_create_c_bind(Z_OBJECT(self), (ZBindHandler) dispatcher);
                        z_bind_append_ptr(selfp->dispatcher_task, self);
                        assert(z_in_out_multiplexer_subscribe_fd((ZObject *) ev, selfp->inout, selfp->dispatcher_task) == 0);
                }
        }

        private void dispatcher(ZBind *task, Self *self, uint32_t event_flags)
        {
                z_object_ref(Z_OBJECT(self));

                if (event_flags & IO_MULTIPLEXER_OUT) {
                        if (!selfp->is_ready && get_status(self) == 0) {
                                selfp->is_ready = 1;

                                if (selfp->cb_ready)
                                        z_bind_invoke(selfp->cb_ready);
                        }

                        if (selfp->cb_writable)
                                z_bind_invoke(selfp->cb_writable);
                }

                if (selfp->cb_readable && event_flags & IO_MULTIPLEXER_IN)
                        z_bind_invoke(selfp->cb_readable);

                if (selfp->cb_error && event_flags & IO_MULTIPLEXER_ERR)
                        z_bind_invoke(selfp->cb_error);

                if (selfp->cb_disconnect && event_flags & IO_MULTIPLEXER_RDHUP) {
                        /* There should not be any more 'read' events after this since the remote
                           peer closed its write part of the socket */
                        set_on_readable(self, NULL);

                        /* The disconnect callback is a one-shot callback */
                        z_bind_invoke(selfp->cb_disconnect);
                        set_on_disconnect(self, NULL);
                }

                if (selfp->cb_hangup && event_flags & IO_MULTIPLEXER_HUP) {
                        /* The hangup callback is a one-shot callback */
                        z_bind_invoke(selfp->cb_hangup);
                        set_on_hangup(self, NULL);
                }

                z_object_unref(Z_OBJECT(self));
        }

        public int declare_family(Self *self, int family)
        {
                int domain;
                int rc;

                switch (family) {
                case AF_INET6:
                        domain = PF_INET6;
                        break;
                case AF_INET:
                        domain = PF_INET;
                        break;
                default:
                        /* Unsupported address family */
                        abort();
                }

                /* Create TCP socket */
                int fd;
                if ((fd = socket(domain, SOCK_STREAM, 0)) == -1) {
                        rc = -errno;
                        perror("socket");
                        return rc;
                }

                ZInOut *inout = z_in_out_new(CTX_FROM_OBJECT(self), ALLOCATOR_FROM_OBJECT(self));
                z_in_out_set_fd(inout, fd);
                z_in_out_set_flags(inout, O_NONBLOCK);

                set_inout(self, inout);
                z_object_unref(Z_OBJECT(inout));

                selfp->info.common.sa_family = family;
                return 0;
        }

        private int bind_to_fd(Self *self)
        {
                socklen_t address_len;

                if (selfp->inout == NULL)
                        return -EBADF;

                switch (selfp->info.common.sa_family) {
                case AF_INET6:
                        address_len = sizeof(struct sockaddr_in6);
                        break;
                case AF_INET:
                        address_len = sizeof(struct sockaddr_in);
                        break;
                default:
                        /* Unsupported address family */
                        abort();
                }

                /* Bind the socket */
                if (z_in_out_socket_bind(selfp->inout, &selfp->info.common, address_len) == -1) {
                        int rc = -errno;
                        perror("Failed to bind the socket");
                        return rc;
                }

                return 0;
        }

        public int enable_passive_mode(Self *self, int backlog)
        {
                int rc = bind_to_fd(self);
                if (rc != 0)
                        return rc;

                if (z_in_out_socket_listen(selfp->inout, backlog) == -1) {
                        rc = -errno;
                        perror("Failed to listen on server socket");
                }

                return rc;
        }

        public ZSocket * accept_connection(Self *self)
        {
                ZSocket *socket = z_socket_new(CTX_FROM_OBJECT(self), ALLOCATOR_FROM_OBJECT(self));
                union sock_address client_address;
                int client_address_len;
                int client_fd;

                switch (selfp->info.common.sa_family) {
                case AF_INET6:
                        {
                                client_address_len = sizeof(struct sockaddr_in6);
                                client_fd = z_in_out_socket_accept(selfp->inout, &client_address.common, &client_address_len, SOCK_NONBLOCK | SOCK_CLOEXEC);

                                assert(declare_family(socket, AF_INET6) == 0);

                                ZInOut *inout = z_in_out_new(CTX_FROM_OBJECT(self), ALLOCATOR_FROM_OBJECT(self));
                                z_in_out_set_fd(inout, client_fd);
                                set_inout(socket, inout);
                                z_object_unref(Z_OBJECT(inout));

                                set_port(socket, ntohs(client_address.ipv6.sin6_port));
                                set_flowinfo(socket, client_address.ipv6.sin6_flowinfo);
                                set_ipv6_address(socket, client_address.ipv6.sin6_addr);
                                set_scope_id(socket, client_address.ipv6.sin6_scope_id);
                        }

                        break;
                case AF_INET:
                        {
                                client_address_len = sizeof(struct sockaddr_in);
                                client_fd = z_in_out_socket_accept(selfp->inout, &client_address.common, &client_address_len, SOCK_NONBLOCK | SOCK_CLOEXEC);

                                assert(declare_family(socket, AF_INET) == 0);

                                ZInOut *inout = z_in_out_new(CTX_FROM_OBJECT(self), ALLOCATOR_FROM_OBJECT(self));
                                z_in_out_set_fd(inout, client_fd);
                                set_inout(socket, inout);
                                z_object_unref(Z_OBJECT(inout));

                                set_port(socket, ntohs(client_address.ipv4.sin_port));
                                set_ipv4_address(socket, client_address.ipv4.sin_addr.s_addr);
                        }
                        break;
                default:
                        /* Unsupported address family */
                        abort();
                }

                return socket;
        }

        public ZBind * on_ready
        {
                set
                {
                        if (selfp->cb_ready)
                                z_object_unref(Z_OBJECT(selfp->cb_ready));

                        selfp->cb_ready = value;

                        if (selfp->cb_ready)
                                z_object_ref(Z_OBJECT(selfp->cb_ready));
                }
        }

        public ZBind * on_disconnect
        {
                set
                {
                        if (selfp->cb_disconnect)
                                z_object_unref(Z_OBJECT(selfp->cb_disconnect));

                        selfp->cb_disconnect = value;

                        if (selfp->cb_disconnect)
                                z_object_ref(Z_OBJECT(selfp->cb_disconnect));
                }
        }

        public ZBind * on_hangup
        {
                set
                {
                        if (selfp->cb_hangup)
                                z_object_unref(Z_OBJECT(selfp->cb_hangup));

                        selfp->cb_hangup = value;

                        if (selfp->cb_hangup)
                                z_object_ref(Z_OBJECT(selfp->cb_hangup));
                }
        }

        public ZBind * on_error
        {
                set
                {
                        if (selfp->cb_error)
                                z_object_unref(Z_OBJECT(selfp->cb_error));

                        selfp->cb_error = value;

                        if (selfp->cb_error)
                                z_object_ref(Z_OBJECT(selfp->cb_error));
                }
        }

        public ZBind * on_readable
        {
                set
                {
                        if (selfp->cb_readable)
                                z_object_unref(Z_OBJECT(selfp->cb_readable));

                        selfp->cb_readable = value;

                        if (selfp->cb_readable)
                                z_object_ref(Z_OBJECT(selfp->cb_readable));
                }
        }

        public ZBind * on_writable
        {
                set
                {
                        if (selfp->cb_writable)
                                z_object_unref(Z_OBJECT(selfp->cb_writable));

                        selfp->cb_writable = value;

                        if (selfp->cb_writable)
                                z_object_ref(Z_OBJECT(selfp->cb_writable));
                }
        }
}

