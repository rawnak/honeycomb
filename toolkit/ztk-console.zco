/* ZCO - Cross-platform Application Framework
 * Copyright (C) 2014  Rawnak Jahan Syeda
 *
 * ztk-console.zco: Console for standard IO
 * This file is part of ZCO.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ZCO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZCO.  If not, see <http://www.gnu.org/licenses/>.
 */

%h{
#include <ztk-object.h>
#include <ztk-string.h>
%}

%{
#include <stdio.h>
#include <unistd.h>
%}

class ZtkConsole : ZtkObject
{
	init(Self *self)
	{
	}

	override(ZObject) void dispose(ZObject *object)
	{
		Self *self = (Self *) object;
		PARENT_HANDLER(object);
	}

	override(ZtkObject) void export_methods(ZtkObject *object)
        {
                Self *self = (Self *) object;
                PARENT_HANDLER(object);

                ZRuntimeContext *runtime_context = ztk_object_get_runtime_context(object);

                z_runtime_context_suspend_method_hook(runtime_context);
                write_text(self, NULL);

                z_object_unref(Z_OBJECT(runtime_context));
        }

	public Self *new(ZRuntimeContext *runtime_context)
	{
                struct zco_context_t *ctx = CTX_FROM_OBJECT(runtime_context);
                ZMemoryAllocator *alloc = ALLOCATOR_FROM_OBJECT(runtime_context);

		Self *self = GET_NEW(ctx, alloc);

                ztk_object_set_runtime_context(ZTK_OBJECT(self), runtime_context);
                enum ZRuntimeTarget target = z_runtime_context_get_target(runtime_context);

                switch(target) {
                case Z_RUNTIME_CONTEXT_NATIVE:
                        break;

                case Z_RUNTIME_CONTEXT_JS:
                        {
                                ZString *name = z_runtime_context_generate_name(runtime_context);
                                z_runtime_context_write_line(runtime_context, 0, "var %S = new %s();", name, ((ZCommonGlobal *) GLOBAL_FROM_OBJECT(self))->name);
                                ztk_object_set_name(ZTK_OBJECT(self), name);
                                z_object_unref(Z_OBJECT(name));
                        }
                        break;
                default:
                        abort();
                }

		return self;
	}

        public export void * write_text(Self *self, ZtkString *text)
        {
                ZRuntimeContext *runtime_context = ztk_object_get_runtime_context(ZTK_OBJECT(self));
                enum ZRuntimeTarget target = z_runtime_context_get_target(runtime_context);

                switch(target) {
                case Z_RUNTIME_CONTEXT_NATIVE:
                        {
                                ZString *str = ztk_string_get_data(text);
                                char *buf = z_string_get_cstring(str, Z_STRING_ENCODING_UTF8);
                                write(1, buf, z_string_get_length(str));
                                write(1, "\n", 1);
                                free(buf);
                                z_object_unref(Z_OBJECT(str));
                        }
                        break;

                case Z_RUNTIME_CONTEXT_JS:
                        {
                                z_runtime_context_write_line(runtime_context, 0, "%s.prototype.write_text = function(a1) {", ((ZCommonGlobal *) GLOBAL_FROM_OBJECT(self))->name);
                                z_runtime_context_write_line(runtime_context, 1, "console.log(a1.data);");
                                z_runtime_context_write_line(runtime_context, -1, "};");

                        }
                        break;
                default:
                        abort();
                }

                z_object_unref(Z_OBJECT(runtime_context));
        }
}

