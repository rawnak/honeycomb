/* ZCO - Cross-platform Application Framework
 * Copyright (C) 2014  Syeda Sultana
 *
 * z-object.zco: Base class for all objects
 * This file is part of ZCO.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ZCO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZCO.  If not, see <http://www.gnu.org/licenses/>.
 */

%h{
#define likely(x)    __builtin_expect((x),1)
#define unlikely(x)  __builtin_expect((x),0)

struct ZObject;
typedef void(*ZObjectSignalHandler)(struct ZObject *self, ...);
%}

%{
#include <assert.h>
#include <z-map.h>
#include <z-vector.h>
#include <z-vector-iter.h>
#include <z-closure.h>
#include <z-string.h>
%}

class ZObject 
{
	public void *class_base;
	public int *vtable;
	private unsigned int ref_count;
	private void *attached_properties;
	private void *signal_map;

	init(Self *self)
	{
		selfp->ref_count = 1;
		selfp->attached_properties = 0;
		selfp->signal_map = 0;
	}

	public virtual void dispose(Self *self)
	{
		ZVector *attached_properties = selfp->attached_properties;
		if (attached_properties) {
			ZVectorIter *it, *end;

			/* iterate through all attached properties */
			it = z_vector_get_begin(attached_properties);
			end = z_vector_get_end(attached_properties);

			for (; !z_vector_iter_is_equal(it, end); z_vector_iter_increment(it)) {
				/* the vector contains a list of maps that has a pointer to 'self'.
				   our goal is to remove 'self' from the map */
				ZMap *map = (ZMap *) z_vector_get_item(attached_properties, it);

				/* remove the pointer */
				ZMapIter *x = z_map_find(map, self);
				z_map_erase1(map, x);
				z_object_unref(Z_OBJECT(x));
			}

			z_object_unref(Z_OBJECT(end));
			z_object_unref(Z_OBJECT(it));
			z_object_unref(Z_OBJECT(attached_properties));

			selfp->attached_properties = NULL;
		}

		ZMap *signal_map = selfp->signal_map;
		if (signal_map) {
			z_object_unref(Z_OBJECT(signal_map));
			selfp->signal_map = NULL;
		}

		free(self);
	}

	public void ref(Self *self)
	{
		++selfp->ref_count;
	}

	public void unref(Self *self)
	{
		assert(selfp->ref_count > 0);
		if (--selfp->ref_count == 0)
			dispose(self);
	}

	public void * connect(Self *self, char *name, ZObjectSignalHandler handler, void *userdata)
	{
		ZClosure *closure;

		assert(selfp->signal_map != NULL);

		/* create a closure */
		closure = z_closure_new(CTX);
		z_closure_set_handler(closure, handler);
		z_closure_set_userdata(closure, userdata);

		/* locate signal's closure list by name */
		ZMapIter *it = z_map_find(selfp->signal_map, name);
		assert(it != NULL);
		ZVector *closure_list = z_map_get_value(selfp->signal_map, it);

		/* add new closure into the signal */
		z_vector_push_back(closure_list, closure);

		return closure;
	}

	public void disconnect(Self *self, char *name, void *key)
	{
		assert(selfp->signal_map != NULL);

		/* locate signal's closure list by name */
		ZMapIter *map_iter = z_map_find(selfp->signal_map, name);
		assert(map_iter != NULL);
		ZVector *closure_list = z_map_get_value(selfp->signal_map, map_iter);

		/* remove the closure from the list */
		ZVectorIter *it = z_vector_get_begin(closure_list);
		ZVectorIter *end = z_vector_get_end(closure_list);

		while (!z_vector_iter_is_equal(it, end)) {
			void *current_key = z_vector_get_item(closure_list, it);

			if (current_key == key) {
				z_vector_erase1(closure_list, it);
				break;
			} else {
				z_vector_iter_increment(it);
			}
		}
	}

	public void register_signal(Self *self, char *name)
	{
		/* create signal map (if necessary) */
		if (!selfp->signal_map) {
			selfp->signal_map = z_map_new(CTX);
			z_map_set_compare(selfp->signal_map, map_compare);
			z_map_set_key_destruct(selfp->signal_map, (ZMapItemCallback) free);
			z_map_set_value_destruct(selfp->signal_map, (ZMapItemCallback) z_object_unref);
		}

		/* locate signal's closure list by name */
		ZMapIter *it = z_map_find(selfp->signal_map, name);

		if (!it) {
			ZVector *closure_list = z_vector_new(CTX, sizeof(void *));
			z_vector_set_item_destruct(closure_list, (ZVectorItemCallback) z_object_unref);
			z_map_insert(selfp->signal_map, strdup(name), closure_list);
		}
	}


	/*** INTERNAL METHODS ***/

	public int emit_signal(Self *self, char *name, void *argv)
	{
		assert(selfp->signal_map != NULL);

		/* locate signal's closure list by name */
		ZMapIter *map_iter = z_map_find(selfp->signal_map, name);
		assert(map_iter != NULL);
		ZVector *closure_list = z_map_get_value(selfp->signal_map, map_iter);

		/* remove the closure from the list */
		ZVectorIter *it = z_vector_get_begin(closure_list);
		ZVectorIter *end = z_vector_get_end(closure_list);
		int rc = 0;

		while (!z_vector_iter_is_equal(it, end)) {
			ZClosure *closure = ((ZClosure *) z_vector_get_item(closure_list, it));
			rc = z_closure_invoke(closure, (ZVector *) argv);

			if (rc == 1)
				break;
		}

		return rc;
	}

	public void add_attached_property_map(Self *self, void *map)
	{
		if (selfp->attached_properties == 0)
			selfp->attached_properties = z_vector_new(CTX, sizeof(void *));

		/* keep note of the maps that has a pointer to 'self' */
		z_vector_push_back((ZVector *) selfp->attached_properties, map);
	}

	private int map_compare(ZMap *map, const void *a, const void *b)
	{
		return strcmp(a, b);
	}
}

